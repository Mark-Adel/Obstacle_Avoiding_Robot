
Obstacle_Avoiding_Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002650  000026e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800074  00800074  000026f8  2**0
                  ALLOC
  3 .stab         000024fc  00000000  00000000  000026f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ea  00000000  00000000  00004bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009113  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a098  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a218  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_1>
       8:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_2>
       c:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 10 	call	0x2102	; 0x2102 <main>
      8a:	0c 94 26 13 	jmp	0x264c	; 0x264c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 17 13 	jmp	0x262e	; 0x262e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 17 13 	jmp	0x262e	; 0x262e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 17 13 	jmp	0x262e	; 0x262e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 17 13 	jmp	0x262e	; 0x262e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 17 13 	jmp	0x262e	; 0x262e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DC_MOTOR_void_init>:
#include "DC_motor_config.h"
#include "DC_motor_interface.h"
#include "TIM_INTERFACE.h"


void DC_MOTOR_void_init(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	TIM2_VoidInt();
     ca6:	0e 94 13 10 	call	0x2026	; 0x2026 <TIM2_VoidInt>
	DIO_voidSetPortDirection(DIO_u8PORT_C, 0x3d);
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	6d e3       	ldi	r22, 0x3D	; 61
     cae:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(DIO_u8PORT_B, DIO_u8PIN_3, DIO_u8OUTPUT);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	63 e0       	ldi	r22, 0x03	; 3
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORT_D, DIO_u8PIN_7, DIO_u8OUTPUT);
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	67 e0       	ldi	r22, 0x07	; 7
     cc0:	41 e0       	ldi	r20, 0x01	; 1
     cc2:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
}
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <Move_right>:

void Move_right(u8 speed )
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	0f 92       	push	r0
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR1_PIN1, DIO_u8HIGH);
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	62 e0       	ldi	r22, 0x02	; 2
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR1_PIN2, DIO_u8LOW);
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	63 e0       	ldi	r22, 0x03	; 3
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR2_PIN1, DIO_u8LOW);
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	64 e0       	ldi	r22, 0x04	; 4
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR2_PIN2, DIO_u8LOW);
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	65 e0       	ldi	r22, 0x05	; 5
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DC_MOTOR1_PWM(speed);
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	0e 94 f0 06 	call	0xde0	; 0xde0 <DC_MOTOR1_PWM>

}
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <Move_left>:

void Move_left (u8 speed)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	0f 92       	push	r0
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR1_PIN1, DIO_u8LOW);
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	62 e0       	ldi	r22, 0x02	; 2
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR1_PIN2, DIO_u8LOW);
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	63 e0       	ldi	r22, 0x03	; 3
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR2_PIN1, DIO_u8LOW);
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	64 e0       	ldi	r22, 0x04	; 4
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR2_PIN2, DIO_u8HIGH);
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	65 e0       	ldi	r22, 0x05	; 5
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DC_MOTOR2_PWM(speed);
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DC_MOTOR2_PWM>

}
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <GO_Straight>:


void GO_Straight(u8 speed)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR1_PIN1, DIO_u8LOW);
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	62 e0       	ldi	r22, 0x02	; 2
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR1_PIN2, DIO_u8HIGH);
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	63 e0       	ldi	r22, 0x03	; 3
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR2_PIN1, DIO_u8LOW);
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	64 e0       	ldi	r22, 0x04	; 4
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR2_PIN2, DIO_u8HIGH);
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	65 e0       	ldi	r22, 0x05	; 5
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DC_MOTOR1_PWM(speed);
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	0e 94 f0 06 	call	0xde0	; 0xde0 <DC_MOTOR1_PWM>
	DC_MOTOR2_PWM(speed);
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DC_MOTOR2_PWM>
}
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <GO_Backward>:


void GO_Backward(u8 speed){
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	0f 92       	push	r0
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR1_PIN1, DIO_u8HIGH);
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	62 e0       	ldi	r22, 0x02	; 2
     da8:	41 e0       	ldi	r20, 0x01	; 1
     daa:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR1_PIN2, DIO_u8LOW);
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	63 e0       	ldi	r22, 0x03	; 3
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR2_PIN1, DIO_u8HIGH);
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	64 e0       	ldi	r22, 0x04	; 4
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT1, DC_MOTOR2_PIN2, DIO_u8LOW);
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	65 e0       	ldi	r22, 0x05	; 5
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	DC_MOTOR1_PWM(speed);
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	0e 94 f0 06 	call	0xde0	; 0xde0 <DC_MOTOR1_PWM>
	DC_MOTOR2_PWM(speed);
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DC_MOTOR2_PWM>
}
     dd8:	0f 90       	pop	r0
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <DC_MOTOR1_PWM>:


void DC_MOTOR1_PWM(u8 local_copy_pwm_value){
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	0f 92       	push	r0
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	89 83       	std	Y+1, r24	; 0x01
	PWM_VoidSetOCR0(local_copy_pwm_value);
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <PWM_VoidSetOCR0>
}
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <DC_MOTOR2_PWM>:


void DC_MOTOR2_PWM(u8 local_copy_pwm_value){
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	0f 92       	push	r0
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	89 83       	std	Y+1, r24	; 0x01
	PWM_VoidSetOCR2(local_copy_pwm_value);
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	0e 94 05 10 	call	0x200a	; 0x200a <PWM_VoidSetOCR2>
}
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <DC_MOTOR_STOP>:





void DC_MOTOR_STOP(void){
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR1_PWM(0);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 f0 06 	call	0xde0	; 0xde0 <DC_MOTOR1_PWM>
	DC_MOTOR2_PWM(0);
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DC_MOTOR2_PWM>
}
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <DIO_U8TogelPin>:
# include "BIT_MATH.h"
#include "Dio_reg.h"
#include "Dio_interface.h"

void DIO_U8TogelPin(u8 Copy_u8PortId,u8 Copy_u8PinId)
{  u8 x;
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <DIO_U8TogelPin+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	6b 83       	std	Y+3, r22	; 0x03
	 x=DIO_u8GetPinValue(Copy_u8PortId,Copy_u8PinId);
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	6b 81       	ldd	r22, Y+3	; 0x03
     e42:	0e 94 33 09 	call	0x1266	; 0x1266 <DIO_u8GetPinValue>
     e46:	89 83       	std	Y+1, r24	; 0x01
	 x=x^0xfe;
     e48:	99 81       	ldd	r25, Y+1	; 0x01
     e4a:	8e ef       	ldi	r24, 0xFE	; 254
     e4c:	89 27       	eor	r24, r25
     e4e:	89 83       	std	Y+1, r24	; 0x01
	 DIO_voidSetPinValue(Copy_u8PortId,Copy_u8PinId,  x);
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	6b 81       	ldd	r22, Y+3	; 0x03
     e54:	49 81       	ldd	r20, Y+1	; 0x01
     e56:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>

}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <DIO_voidSetPinDirection>:


 void DIO_voidSetPinDirection(u8 Copy_u8PortId,u8 Copy_u8PinId, u8 Copy_u8PinDir)
	{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	27 97       	sbiw	r28, 0x07	; 7
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	6a 83       	std	Y+2, r22	; 0x02
     e7e:	4b 83       	std	Y+3, r20	; 0x03


		if(Copy_u8PinDir==DIO_u8OUTPUT)
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	09 f0       	breq	.+2      	; 0xe88 <DIO_voidSetPinDirection+0x22>
     e86:	6f c0       	rjmp	.+222    	; 0xf66 <DIO_voidSetPinDirection+0x100>
		  {
		   switch (Copy_u8PortId)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	3f 83       	std	Y+7, r19	; 0x07
     e90:	2e 83       	std	Y+6, r18	; 0x06
     e92:	8e 81       	ldd	r24, Y+6	; 0x06
     e94:	9f 81       	ldd	r25, Y+7	; 0x07
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	91 05       	cpc	r25, r1
     e9a:	49 f1       	breq	.+82     	; 0xeee <DIO_voidSetPinDirection+0x88>
     e9c:	2e 81       	ldd	r18, Y+6	; 0x06
     e9e:	3f 81       	ldd	r19, Y+7	; 0x07
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	31 05       	cpc	r19, r1
     ea4:	2c f4       	brge	.+10     	; 0xeb0 <DIO_voidSetPinDirection+0x4a>
     ea6:	8e 81       	ldd	r24, Y+6	; 0x06
     ea8:	9f 81       	ldd	r25, Y+7	; 0x07
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	61 f0       	breq	.+24     	; 0xec6 <DIO_voidSetPinDirection+0x60>
     eae:	d2 c0       	rjmp	.+420    	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
     eb0:	2e 81       	ldd	r18, Y+6	; 0x06
     eb2:	3f 81       	ldd	r19, Y+7	; 0x07
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	71 f1       	breq	.+92     	; 0xf16 <DIO_voidSetPinDirection+0xb0>
     eba:	8e 81       	ldd	r24, Y+6	; 0x06
     ebc:	9f 81       	ldd	r25, Y+7	; 0x07
     ebe:	83 30       	cpi	r24, 0x03	; 3
     ec0:	91 05       	cpc	r25, r1
     ec2:	e9 f1       	breq	.+122    	; 0xf3e <DIO_voidSetPinDirection+0xd8>
     ec4:	c7 c0       	rjmp	.+398    	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
		   {
		    case DIO_u8PORT_A : SET_BIT(DDRA,Copy_u8PinId);break;
     ec6:	aa e3       	ldi	r26, 0x3A	; 58
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ea e3       	ldi	r30, 0x3A	; 58
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_voidSetPinDirection+0x7e>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_voidSetPinDirection+0x7a>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	b3 c0       	rjmp	.+358    	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
		    case DIO_u8PORT_B : SET_BIT(DDRB,Copy_u8PinId);break;
     eee:	a7 e3       	ldi	r26, 0x37	; 55
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e7 e3       	ldi	r30, 0x37	; 55
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_voidSetPinDirection+0xa6>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_voidSetPinDirection+0xa2>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	9f c0       	rjmp	.+318    	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
		    case DIO_u8PORT_C : SET_BIT(DDRC,Copy_u8PinId);break;
     f16:	a4 e3       	ldi	r26, 0x34	; 52
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e4 e3       	ldi	r30, 0x34	; 52
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinDirection+0xce>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinDirection+0xca>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	8b c0       	rjmp	.+278    	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
		    case DIO_u8PORT_D : SET_BIT(DDRD,Copy_u8PinId);break;
     f3e:	a1 e3       	ldi	r26, 0x31	; 49
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e1 e3       	ldi	r30, 0x31	; 49
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_voidSetPinDirection+0xf6>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_voidSetPinDirection+0xf2>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	77 c0       	rjmp	.+238    	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
		   }

	     }
		  else if (Copy_u8PinDir==DIO_u8INPUT)
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	88 23       	and	r24, r24
     f6a:	09 f0       	breq	.+2      	; 0xf6e <DIO_voidSetPinDirection+0x108>
     f6c:	73 c0       	rjmp	.+230    	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
		 {
		   switch (Copy_u8PortId)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3d 83       	std	Y+5, r19	; 0x05
     f76:	2c 83       	std	Y+4, r18	; 0x04
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	59 f1       	breq	.+86     	; 0xfd8 <DIO_voidSetPinDirection+0x172>
     f82:	2c 81       	ldd	r18, Y+4	; 0x04
     f84:	3d 81       	ldd	r19, Y+5	; 0x05
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	2c f4       	brge	.+10     	; 0xf96 <DIO_voidSetPinDirection+0x130>
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	69 f0       	breq	.+26     	; 0xfae <DIO_voidSetPinDirection+0x148>
     f94:	5f c0       	rjmp	.+190    	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
     f96:	2c 81       	ldd	r18, Y+4	; 0x04
     f98:	3d 81       	ldd	r19, Y+5	; 0x05
     f9a:	22 30       	cpi	r18, 0x02	; 2
     f9c:	31 05       	cpc	r19, r1
     f9e:	89 f1       	breq	.+98     	; 0x1002 <DIO_voidSetPinDirection+0x19c>
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <DIO_voidSetPinDirection+0x146>
     faa:	40 c0       	rjmp	.+128    	; 0x102c <DIO_voidSetPinDirection+0x1c6>
     fac:	53 c0       	rjmp	.+166    	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
		    {
		      case DIO_u8PORT_A : CLR_BIT(DDRA,Copy_u8PinId);break;
     fae:	aa e3       	ldi	r26, 0x3A	; 58
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ea e3       	ldi	r30, 0x3A	; 58
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_voidSetPinDirection+0x166>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_voidSetPinDirection+0x162>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	3e c0       	rjmp	.+124    	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
			  case DIO_u8PORT_B : CLR_BIT(DDRB,Copy_u8PinId);break;
     fd8:	a7 e3       	ldi	r26, 0x37	; 55
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e7 e3       	ldi	r30, 0x37	; 55
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_voidSetPinDirection+0x190>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_voidSetPinDirection+0x18c>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	29 c0       	rjmp	.+82     	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
			  case DIO_u8PORT_C : CLR_BIT(DDRC,Copy_u8PinId);break;
    1002:	a4 e3       	ldi	r26, 0x34	; 52
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e4 e3       	ldi	r30, 0x34	; 52
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_voidSetPinDirection+0x1ba>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_voidSetPinDirection+0x1b6>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	14 c0       	rjmp	.+40     	; 0x1054 <DIO_voidSetPinDirection+0x1ee>
			  case DIO_u8PORT_D : CLR_BIT(DDRD,Copy_u8PinId);break;
    102c:	a1 e3       	ldi	r26, 0x31	; 49
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e1 e3       	ldi	r30, 0x31	; 49
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_voidSetPinDirection+0x1e4>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_voidSetPinDirection+0x1e0>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
		    }

		 }
	 }
    1054:	27 96       	adiw	r28, 0x07	; 7
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <DIO_voidSetPinValue>:




	void DIO_voidSetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId, u8 Copy_u8PinVal)
	{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	27 97       	sbiw	r28, 0x07	; 7
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	6a 83       	std	Y+2, r22	; 0x02
    107e:	4b 83       	std	Y+3, r20	; 0x03
		//if ( Copy_u8PortId<=DIO_u8PORT_D&& Copy_u8PinId<=7)
			// {
				if(Copy_u8PinVal==DIO_u8HIGH)
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	09 f0       	breq	.+2      	; 0x1088 <DIO_voidSetPinValue+0x22>
    1086:	6f c0       	rjmp	.+222    	; 0x1166 <DIO_voidSetPinValue+0x100>
				  {
				   switch (Copy_u8PortId)
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	3f 83       	std	Y+7, r19	; 0x07
    1090:	2e 83       	std	Y+6, r18	; 0x06
    1092:	8e 81       	ldd	r24, Y+6	; 0x06
    1094:	9f 81       	ldd	r25, Y+7	; 0x07
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	91 05       	cpc	r25, r1
    109a:	49 f1       	breq	.+82     	; 0x10ee <DIO_voidSetPinValue+0x88>
    109c:	2e 81       	ldd	r18, Y+6	; 0x06
    109e:	3f 81       	ldd	r19, Y+7	; 0x07
    10a0:	22 30       	cpi	r18, 0x02	; 2
    10a2:	31 05       	cpc	r19, r1
    10a4:	2c f4       	brge	.+10     	; 0x10b0 <DIO_voidSetPinValue+0x4a>
    10a6:	8e 81       	ldd	r24, Y+6	; 0x06
    10a8:	9f 81       	ldd	r25, Y+7	; 0x07
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	61 f0       	breq	.+24     	; 0x10c6 <DIO_voidSetPinValue+0x60>
    10ae:	d2 c0       	rjmp	.+420    	; 0x1254 <DIO_voidSetPinValue+0x1ee>
    10b0:	2e 81       	ldd	r18, Y+6	; 0x06
    10b2:	3f 81       	ldd	r19, Y+7	; 0x07
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	71 f1       	breq	.+92     	; 0x1116 <DIO_voidSetPinValue+0xb0>
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	83 30       	cpi	r24, 0x03	; 3
    10c0:	91 05       	cpc	r25, r1
    10c2:	e9 f1       	breq	.+122    	; 0x113e <DIO_voidSetPinValue+0xd8>
    10c4:	c7 c0       	rjmp	.+398    	; 0x1254 <DIO_voidSetPinValue+0x1ee>
				   {
				    case DIO_u8PORT_A : SET_BIT(PORTA,Copy_u8PinId);break;
    10c6:	ab e3       	ldi	r26, 0x3B	; 59
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	eb e3       	ldi	r30, 0x3B	; 59
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_voidSetPinValue+0x7e>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_voidSetPinValue+0x7a>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	b3 c0       	rjmp	.+358    	; 0x1254 <DIO_voidSetPinValue+0x1ee>
				    case DIO_u8PORT_B : SET_BIT(PORTB,Copy_u8PinId);break;
    10ee:	a8 e3       	ldi	r26, 0x38	; 56
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e3       	ldi	r30, 0x38	; 56
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_voidSetPinValue+0xa6>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_voidSetPinValue+0xa2>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	9f c0       	rjmp	.+318    	; 0x1254 <DIO_voidSetPinValue+0x1ee>
				    case DIO_u8PORT_C : SET_BIT(PORTC,Copy_u8PinId);break;
    1116:	a5 e3       	ldi	r26, 0x35	; 53
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e3       	ldi	r30, 0x35	; 53
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_voidSetPinValue+0xce>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_voidSetPinValue+0xca>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	8b c0       	rjmp	.+278    	; 0x1254 <DIO_voidSetPinValue+0x1ee>
				    case DIO_u8PORT_D : SET_BIT(PORTD,Copy_u8PinId);break;
    113e:	a2 e3       	ldi	r26, 0x32	; 50
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e2 e3       	ldi	r30, 0x32	; 50
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_voidSetPinValue+0xf6>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_voidSetPinValue+0xf2>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	77 c0       	rjmp	.+238    	; 0x1254 <DIO_voidSetPinValue+0x1ee>
				   }

			     }
				 else if (Copy_u8PinVal==DIO_u8LOW)
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	88 23       	and	r24, r24
    116a:	09 f0       	breq	.+2      	; 0x116e <DIO_voidSetPinValue+0x108>
    116c:	73 c0       	rjmp	.+230    	; 0x1254 <DIO_voidSetPinValue+0x1ee>
				 {
				   switch (Copy_u8PortId)
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3d 83       	std	Y+5, r19	; 0x05
    1176:	2c 83       	std	Y+4, r18	; 0x04
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	91 05       	cpc	r25, r1
    1180:	59 f1       	breq	.+86     	; 0x11d8 <DIO_voidSetPinValue+0x172>
    1182:	2c 81       	ldd	r18, Y+4	; 0x04
    1184:	3d 81       	ldd	r19, Y+5	; 0x05
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	2c f4       	brge	.+10     	; 0x1196 <DIO_voidSetPinValue+0x130>
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f0       	breq	.+26     	; 0x11ae <DIO_voidSetPinValue+0x148>
    1194:	5f c0       	rjmp	.+190    	; 0x1254 <DIO_voidSetPinValue+0x1ee>
    1196:	2c 81       	ldd	r18, Y+4	; 0x04
    1198:	3d 81       	ldd	r19, Y+5	; 0x05
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	89 f1       	breq	.+98     	; 0x1202 <DIO_voidSetPinValue+0x19c>
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	91 05       	cpc	r25, r1
    11a8:	09 f4       	brne	.+2      	; 0x11ac <DIO_voidSetPinValue+0x146>
    11aa:	40 c0       	rjmp	.+128    	; 0x122c <DIO_voidSetPinValue+0x1c6>
    11ac:	53 c0       	rjmp	.+166    	; 0x1254 <DIO_voidSetPinValue+0x1ee>
				    {
				      case DIO_u8PORT_A : CLR_BIT(PORTA,Copy_u8PinId);break;
    11ae:	ab e3       	ldi	r26, 0x3B	; 59
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	eb e3       	ldi	r30, 0x3B	; 59
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_voidSetPinValue+0x166>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_voidSetPinValue+0x162>
    11d0:	80 95       	com	r24
    11d2:	84 23       	and	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	3e c0       	rjmp	.+124    	; 0x1254 <DIO_voidSetPinValue+0x1ee>
					  case DIO_u8PORT_B : CLR_BIT(PORTB,Copy_u8PinId);break;
    11d8:	a8 e3       	ldi	r26, 0x38	; 56
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e8 e3       	ldi	r30, 0x38	; 56
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_voidSetPinValue+0x190>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_voidSetPinValue+0x18c>
    11fa:	80 95       	com	r24
    11fc:	84 23       	and	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	29 c0       	rjmp	.+82     	; 0x1254 <DIO_voidSetPinValue+0x1ee>
					  case DIO_u8PORT_C : CLR_BIT(PORTC,Copy_u8PinId);break;
    1202:	a5 e3       	ldi	r26, 0x35	; 53
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e3       	ldi	r30, 0x35	; 53
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_voidSetPinValue+0x1ba>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_voidSetPinValue+0x1b6>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	14 c0       	rjmp	.+40     	; 0x1254 <DIO_voidSetPinValue+0x1ee>
					  case DIO_u8PORT_D : CLR_BIT(PORTD,Copy_u8PinId);break;
    122c:	a2 e3       	ldi	r26, 0x32	; 50
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e2 e3       	ldi	r30, 0x32	; 50
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_voidSetPinValue+0x1e4>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_voidSetPinValue+0x1e0>
    124e:	80 95       	com	r24
    1250:	84 23       	and	r24, r20
    1252:	8c 93       	st	X, r24
				// }

			  }


	}
    1254:	27 96       	adiw	r28, 0x07	; 7
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <DIO_u8GetPinValue>:

	u8 DIO_u8GetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId)
	{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <DIO_u8GetPinValue+0x6>
    126c:	00 d0       	rcall	.+0      	; 0x126e <DIO_u8GetPinValue+0x8>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <DIO_u8GetPinValue+0xa>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8a 83       	std	Y+2, r24	; 0x02
    1276:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_BinVal;
		if(Copy_u8PinId<=7&&Copy_u8PortId<=DIO_u8PORT_D)
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	88 30       	cpi	r24, 0x08	; 8
    127c:	08 f0       	brcs	.+2      	; 0x1280 <DIO_u8GetPinValue+0x1a>
    127e:	6e c0       	rjmp	.+220    	; 0x135c <DIO_u8GetPinValue+0xf6>
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	84 30       	cpi	r24, 0x04	; 4
    1284:	08 f0       	brcs	.+2      	; 0x1288 <DIO_u8GetPinValue+0x22>
    1286:	6a c0       	rjmp	.+212    	; 0x135c <DIO_u8GetPinValue+0xf6>
		{

			switch (Copy_u8PortId)
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3e 83       	std	Y+6, r19	; 0x06
    1290:	2d 83       	std	Y+5, r18	; 0x05
    1292:	4d 81       	ldd	r20, Y+5	; 0x05
    1294:	5e 81       	ldd	r21, Y+6	; 0x06
    1296:	41 30       	cpi	r20, 0x01	; 1
    1298:	51 05       	cpc	r21, r1
    129a:	41 f1       	breq	.+80     	; 0x12ec <DIO_u8GetPinValue+0x86>
    129c:	8d 81       	ldd	r24, Y+5	; 0x05
    129e:	9e 81       	ldd	r25, Y+6	; 0x06
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	91 05       	cpc	r25, r1
    12a4:	34 f4       	brge	.+12     	; 0x12b2 <DIO_u8GetPinValue+0x4c>
    12a6:	2d 81       	ldd	r18, Y+5	; 0x05
    12a8:	3e 81       	ldd	r19, Y+6	; 0x06
    12aa:	21 15       	cp	r18, r1
    12ac:	31 05       	cpc	r19, r1
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <DIO_u8GetPinValue+0x62>
    12b0:	52 c0       	rjmp	.+164    	; 0x1356 <DIO_u8GetPinValue+0xf0>
    12b2:	4d 81       	ldd	r20, Y+5	; 0x05
    12b4:	5e 81       	ldd	r21, Y+6	; 0x06
    12b6:	42 30       	cpi	r20, 0x02	; 2
    12b8:	51 05       	cpc	r21, r1
    12ba:	51 f1       	breq	.+84     	; 0x1310 <DIO_u8GetPinValue+0xaa>
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	91 05       	cpc	r25, r1
    12c4:	b9 f1       	breq	.+110    	; 0x1334 <DIO_u8GetPinValue+0xce>
    12c6:	47 c0       	rjmp	.+142    	; 0x1356 <DIO_u8GetPinValue+0xf0>
			{
			     case DIO_u8PORT_A: Local_BinVal = GET_BIT(PINA,Copy_u8PinId);break;
    12c8:	e9 e3       	ldi	r30, 0x39	; 57
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_u8GetPinValue+0x7a>
    12dc:	55 95       	asr	r21
    12de:	47 95       	ror	r20
    12e0:	8a 95       	dec	r24
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_u8GetPinValue+0x76>
    12e4:	ca 01       	movw	r24, r20
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	35 c0       	rjmp	.+106    	; 0x1356 <DIO_u8GetPinValue+0xf0>
				 case DIO_u8PORT_B: Local_BinVal = GET_BIT(PINB,Copy_u8PinId);break;
    12ec:	e6 e3       	ldi	r30, 0x36	; 54
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a9 01       	movw	r20, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_u8GetPinValue+0x9e>
    1300:	55 95       	asr	r21
    1302:	47 95       	ror	r20
    1304:	8a 95       	dec	r24
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_u8GetPinValue+0x9a>
    1308:	ca 01       	movw	r24, r20
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	23 c0       	rjmp	.+70     	; 0x1356 <DIO_u8GetPinValue+0xf0>
				 case DIO_u8PORT_C: Local_BinVal = GET_BIT(PINC,Copy_u8PinId);break;
    1310:	e3 e3       	ldi	r30, 0x33	; 51
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a9 01       	movw	r20, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_u8GetPinValue+0xc2>
    1324:	55 95       	asr	r21
    1326:	47 95       	ror	r20
    1328:	8a 95       	dec	r24
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_u8GetPinValue+0xbe>
    132c:	ca 01       	movw	r24, r20
    132e:	81 70       	andi	r24, 0x01	; 1
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	11 c0       	rjmp	.+34     	; 0x1356 <DIO_u8GetPinValue+0xf0>
				 case DIO_u8PORT_D: Local_BinVal = GET_BIT(PIND,Copy_u8PinId) ;break;
    1334:	e0 e3       	ldi	r30, 0x30	; 48
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a9 01       	movw	r20, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_u8GetPinValue+0xe6>
    1348:	55 95       	asr	r21
    134a:	47 95       	ror	r20
    134c:	8a 95       	dec	r24
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_u8GetPinValue+0xe2>
    1350:	ca 01       	movw	r24, r20
    1352:	81 70       	andi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01

			}
			return Local_BinVal;
    1356:	59 81       	ldd	r21, Y+1	; 0x01
    1358:	5c 83       	std	Y+4, r21	; 0x04
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_u8GetPinValue+0xfa>

		}
		else
		{
			 return 0xff;
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	8c 83       	std	Y+4, r24	; 0x04
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
		}



	}
    1362:	26 96       	adiw	r28, 0x06	; 6
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <DIO_voidSetPortDirection>:

	void DIO_voidSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDir)
	{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_voidSetPortDirection+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_voidSetPortDirection+0x8>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	6a 83       	std	Y+2, r22	; 0x02

				switch (Copy_u8PortId)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	3c 83       	std	Y+4, r19	; 0x04
    138c:	2b 83       	std	Y+3, r18	; 0x03
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	91 05       	cpc	r25, r1
    1396:	d1 f0       	breq	.+52     	; 0x13cc <DIO_voidSetPortDirection+0x58>
    1398:	2b 81       	ldd	r18, Y+3	; 0x03
    139a:	3c 81       	ldd	r19, Y+4	; 0x04
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	2c f4       	brge	.+10     	; 0x13ac <DIO_voidSetPortDirection+0x38>
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <DIO_voidSetPortDirection+0x4e>
    13aa:	1e c0       	rjmp	.+60     	; 0x13e8 <DIO_voidSetPortDirection+0x74>
    13ac:	2b 81       	ldd	r18, Y+3	; 0x03
    13ae:	3c 81       	ldd	r19, Y+4	; 0x04
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	81 f0       	breq	.+32     	; 0x13d6 <DIO_voidSetPortDirection+0x62>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	91 05       	cpc	r25, r1
    13be:	81 f0       	breq	.+32     	; 0x13e0 <DIO_voidSetPortDirection+0x6c>
    13c0:	13 c0       	rjmp	.+38     	; 0x13e8 <DIO_voidSetPortDirection+0x74>
				{
				  case DIO_u8PORT_A: DDRA = Copy_u8PortDir;break;
    13c2:	ea e3       	ldi	r30, 0x3A	; 58
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	80 83       	st	Z, r24
    13ca:	0e c0       	rjmp	.+28     	; 0x13e8 <DIO_voidSetPortDirection+0x74>
				  case DIO_u8PORT_B: DDRB = Copy_u8PortDir;break;
    13cc:	e7 e3       	ldi	r30, 0x37	; 55
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	80 83       	st	Z, r24
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <DIO_voidSetPortDirection+0x74>
				  case DIO_u8PORT_C: DDRC = Copy_u8PortDir;break;
    13d6:	e4 e3       	ldi	r30, 0x34	; 52
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	80 83       	st	Z, r24
    13de:	04 c0       	rjmp	.+8      	; 0x13e8 <DIO_voidSetPortDirection+0x74>
				  case DIO_u8PORT_D: DDRD = Copy_u8PortDir;break;
    13e0:	e1 e3       	ldi	r30, 0x31	; 49
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	80 83       	st	Z, r24

				}

	}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <DIO_voidSetPortValue>:

	void DIO_voidSetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortVal)
	{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <DIO_voidSetPortValue+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <DIO_voidSetPortValue+0x8>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	6a 83       	std	Y+2, r22	; 0x02
		    switch (Copy_u8PortId)
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3c 83       	std	Y+4, r19	; 0x04
    140e:	2b 83       	std	Y+3, r18	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	91 05       	cpc	r25, r1
    1418:	d1 f0       	breq	.+52     	; 0x144e <DIO_voidSetPortValue+0x58>
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	2c f4       	brge	.+10     	; 0x142e <DIO_voidSetPortValue+0x38>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	61 f0       	breq	.+24     	; 0x1444 <DIO_voidSetPortValue+0x4e>
    142c:	1e c0       	rjmp	.+60     	; 0x146a <DIO_voidSetPortValue+0x74>
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	81 f0       	breq	.+32     	; 0x1458 <DIO_voidSetPortValue+0x62>
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	91 05       	cpc	r25, r1
    1440:	81 f0       	breq	.+32     	; 0x1462 <DIO_voidSetPortValue+0x6c>
    1442:	13 c0       	rjmp	.+38     	; 0x146a <DIO_voidSetPortValue+0x74>
						{
						  case DIO_u8PORT_A: PORTA = Copy_u8PortVal;break;
    1444:	eb e3       	ldi	r30, 0x3B	; 59
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	80 83       	st	Z, r24
    144c:	0e c0       	rjmp	.+28     	; 0x146a <DIO_voidSetPortValue+0x74>
						  case DIO_u8PORT_B: PORTB = Copy_u8PortVal;break;
    144e:	e8 e3       	ldi	r30, 0x38	; 56
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	80 83       	st	Z, r24
    1456:	09 c0       	rjmp	.+18     	; 0x146a <DIO_voidSetPortValue+0x74>
						  case DIO_u8PORT_C: PORTC = Copy_u8PortVal;break;
    1458:	e5 e3       	ldi	r30, 0x35	; 53
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	80 83       	st	Z, r24
    1460:	04 c0       	rjmp	.+8      	; 0x146a <DIO_voidSetPortValue+0x74>
						  case DIO_u8PORT_D: PORTD = Copy_u8PortVal;break;
    1462:	e2 e3       	ldi	r30, 0x32	; 50
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	80 83       	st	Z, r24

						}
	}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <EXTI0_VoidInti>:
//extern void (*EXTI_pvINT2FUNC)(void);
extern u32 local_timval ;
extern u8 Global_Counter;

void EXTI0_VoidInti(void)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(EXTI_INT0_PORT,EXTI_INT0_PIN,DIO_u8INPUT);
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	62 e0       	ldi	r22, 0x02	; 2
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	//DIO_voidSetPinValue(EXTI_INT0_PORT,EXTI_INT0_PIN,DIO_u8HIGH);
	SET_BIT(GICR,GICR_INT0);
    148a:	ab e5       	ldi	r26, 0x5B	; 91
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	eb e5       	ldi	r30, 0x5B	; 91
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	80 64       	ori	r24, 0x40	; 64
    1496:	8c 93       	st	X, r24
}
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <EXTI1_VoidInti>:

void EXTI1_VoidInti(void)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(EXTI_INT1_PORT,EXTI_INT1_PIN,DIO_u8INPUT);
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	63 e0       	ldi	r22, 0x03	; 3
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(EXTI_INT1_PORT,EXTI_INT1_PIN,DIO_u8HIGH);
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	63 e0       	ldi	r22, 0x03	; 3
    14b4:	41 e0       	ldi	r20, 0x01	; 1
    14b6:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	SET_BIT(GICR,GICR_INT1);
    14ba:	ab e5       	ldi	r26, 0x5B	; 91
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	eb e5       	ldi	r30, 0x5B	; 91
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	80 68       	ori	r24, 0x80	; 128
    14c6:	8c 93       	st	X, r24

}
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <EXTI2_VoidInti>:

void EXTI2_VoidInti(void )
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(EXTI_INT2_PORT,EXTI_INT2_PIN,DIO_u8INPUT);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	62 e0       	ldi	r22, 0x02	; 2
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(EXTI_INT2_PORT,EXTI_INT2_PIN,DIO_u8HIGH);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	62 e0       	ldi	r22, 0x02	; 2
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	SET_BIT(GICR,GICR_INT2);
    14ea:	ab e5       	ldi	r26, 0x5B	; 91
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	eb e5       	ldi	r30, 0x5B	; 91
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 62       	ori	r24, 0x20	; 32
    14f6:	8c 93       	st	X, r24
}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <EXTI_VoidSenseLevel>:


void EXTI_VoidSenseLevel(u8 INT_NUM,u8 Copy_u8INTLevel)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	28 97       	sbiw	r28, 0x08	; 8
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
	if(INT_NUM==2)
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	01 f5       	brne	.+64     	; 0x155c <EXTI_VoidSenseLevel+0x5e>
	{
		switch (Copy_u8INTLevel)
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	38 87       	std	Y+8, r19	; 0x08
    1524:	2f 83       	std	Y+7, r18	; 0x07
    1526:	8f 81       	ldd	r24, Y+7	; 0x07
    1528:	98 85       	ldd	r25, Y+8	; 0x08
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	31 f0       	breq	.+12     	; 0x153c <EXTI_VoidSenseLevel+0x3e>
    1530:	2f 81       	ldd	r18, Y+7	; 0x07
    1532:	38 85       	ldd	r19, Y+8	; 0x08
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	49 f0       	breq	.+18     	; 0x154c <EXTI_VoidSenseLevel+0x4e>
    153a:	c9 c0       	rjmp	.+402    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
		{
		case EXTI_RISYNG_EDGE  :
			SET_BIT(MCUCSR,MCUCR_ISC2);
    153c:	a4 e5       	ldi	r26, 0x54	; 84
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e4 e5       	ldi	r30, 0x54	; 84
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 64       	ori	r24, 0x40	; 64
    1548:	8c 93       	st	X, r24
    154a:	c1 c0       	rjmp	.+386    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
			break;

		case EXTI_FALLING_EDGE :
			CLR_BIT(MCUCSR,MCUCR_ISC2);
    154c:	a4 e5       	ldi	r26, 0x54	; 84
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e4 e5       	ldi	r30, 0x54	; 84
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 7b       	andi	r24, 0xBF	; 191
    1558:	8c 93       	st	X, r24
    155a:	b9 c0       	rjmp	.+370    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
			break;
		}

	}
	else if(INT_NUM==1)
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	09 f0       	breq	.+2      	; 0x1564 <EXTI_VoidSenseLevel+0x66>
    1562:	5b c0       	rjmp	.+182    	; 0x161a <EXTI_VoidSenseLevel+0x11c>
	{
		switch (Copy_u8INTLevel)
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3e 83       	std	Y+6, r19	; 0x06
    156c:	2d 83       	std	Y+5, r18	; 0x05
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	91 05       	cpc	r25, r1
    1576:	21 f1       	breq	.+72     	; 0x15c0 <EXTI_VoidSenseLevel+0xc2>
    1578:	2d 81       	ldd	r18, Y+5	; 0x05
    157a:	3e 81       	ldd	r19, Y+6	; 0x06
    157c:	22 30       	cpi	r18, 0x02	; 2
    157e:	31 05       	cpc	r19, r1
    1580:	2c f4       	brge	.+10     	; 0x158c <EXTI_VoidSenseLevel+0x8e>
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	61 f0       	breq	.+24     	; 0x15a2 <EXTI_VoidSenseLevel+0xa4>
    158a:	a1 c0       	rjmp	.+322    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
    158c:	2d 81       	ldd	r18, Y+5	; 0x05
    158e:	3e 81       	ldd	r19, Y+6	; 0x06
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	31 05       	cpc	r19, r1
    1594:	21 f1       	breq	.+72     	; 0x15de <EXTI_VoidSenseLevel+0xe0>
    1596:	8d 81       	ldd	r24, Y+5	; 0x05
    1598:	9e 81       	ldd	r25, Y+6	; 0x06
    159a:	83 30       	cpi	r24, 0x03	; 3
    159c:	91 05       	cpc	r25, r1
    159e:	71 f1       	breq	.+92     	; 0x15fc <EXTI_VoidSenseLevel+0xfe>
    15a0:	96 c0       	rjmp	.+300    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
		{
		case EXTI_LOW_LEVEL    :
			CLR_BIT(MCUCR,MCUCR_ISC10);
    15a2:	a5 e5       	ldi	r26, 0x55	; 85
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e5 e5       	ldi	r30, 0x55	; 85
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8b 7f       	andi	r24, 0xFB	; 251
    15ae:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    15b0:	a5 e5       	ldi	r26, 0x55	; 85
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e5 e5       	ldi	r30, 0x55	; 85
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	87 7f       	andi	r24, 0xF7	; 247
    15bc:	8c 93       	st	X, r24
    15be:	87 c0       	rjmp	.+270    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
			break;


		case EXTI_RISYNG_EDGE  :
			SET_BIT(MCUCR,MCUCR_ISC10);
    15c0:	a5 e5       	ldi	r26, 0x55	; 85
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e5 e5       	ldi	r30, 0x55	; 85
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	84 60       	ori	r24, 0x04	; 4
    15cc:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    15ce:	a5 e5       	ldi	r26, 0x55	; 85
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e5 e5       	ldi	r30, 0x55	; 85
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	88 60       	ori	r24, 0x08	; 8
    15da:	8c 93       	st	X, r24
    15dc:	78 c0       	rjmp	.+240    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
			break;

		case EXTI_FALLING_EDGE :
			CLR_BIT(MCUCR,MCUCR_ISC10);
    15de:	a5 e5       	ldi	r26, 0x55	; 85
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e5       	ldi	r30, 0x55	; 85
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8b 7f       	andi	r24, 0xFB	; 251
    15ea:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    15ec:	a5 e5       	ldi	r26, 0x55	; 85
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e5       	ldi	r30, 0x55	; 85
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	88 60       	ori	r24, 0x08	; 8
    15f8:	8c 93       	st	X, r24
    15fa:	69 c0       	rjmp	.+210    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
			break;

		case EXTI_ON_CHANGE   :
			CLR_BIT(MCUCR,MCUCR_ISC11);
    15fc:	a5 e5       	ldi	r26, 0x55	; 85
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e5       	ldi	r30, 0x55	; 85
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	87 7f       	andi	r24, 0xF7	; 247
    1608:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC10);
    160a:	a5 e5       	ldi	r26, 0x55	; 85
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e5       	ldi	r30, 0x55	; 85
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	84 60       	ori	r24, 0x04	; 4
    1616:	8c 93       	st	X, r24
    1618:	5a c0       	rjmp	.+180    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
			break;
		}
	}
	else
	{
		switch (Copy_u8INTLevel)
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3c 83       	std	Y+4, r19	; 0x04
    1622:	2b 83       	std	Y+3, r18	; 0x03
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	91 05       	cpc	r25, r1
    162c:	21 f1       	breq	.+72     	; 0x1676 <EXTI_VoidSenseLevel+0x178>
    162e:	2b 81       	ldd	r18, Y+3	; 0x03
    1630:	3c 81       	ldd	r19, Y+4	; 0x04
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	2c f4       	brge	.+10     	; 0x1642 <EXTI_VoidSenseLevel+0x144>
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	61 f0       	breq	.+24     	; 0x1658 <EXTI_VoidSenseLevel+0x15a>
    1640:	46 c0       	rjmp	.+140    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
    1642:	2b 81       	ldd	r18, Y+3	; 0x03
    1644:	3c 81       	ldd	r19, Y+4	; 0x04
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	21 f1       	breq	.+72     	; 0x1694 <EXTI_VoidSenseLevel+0x196>
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	91 05       	cpc	r25, r1
    1654:	71 f1       	breq	.+92     	; 0x16b2 <EXTI_VoidSenseLevel+0x1b4>
    1656:	3b c0       	rjmp	.+118    	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
		{
		case EXTI_LOW_LEVEL    :
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1658:	a5 e5       	ldi	r26, 0x55	; 85
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e5 e5       	ldi	r30, 0x55	; 85
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8e 7f       	andi	r24, 0xFE	; 254
    1664:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1666:	a5 e5       	ldi	r26, 0x55	; 85
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e5 e5       	ldi	r30, 0x55	; 85
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8d 7f       	andi	r24, 0xFD	; 253
    1672:	8c 93       	st	X, r24
    1674:	2c c0       	rjmp	.+88     	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
			break;


		case EXTI_RISYNG_EDGE  :
			SET_BIT(MCUCR,MCUCR_ISC00);
    1676:	a5 e5       	ldi	r26, 0x55	; 85
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e5 e5       	ldi	r30, 0x55	; 85
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	81 60       	ori	r24, 0x01	; 1
    1682:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    1684:	a5 e5       	ldi	r26, 0x55	; 85
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e5 e5       	ldi	r30, 0x55	; 85
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	82 60       	ori	r24, 0x02	; 2
    1690:	8c 93       	st	X, r24
    1692:	1d c0       	rjmp	.+58     	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
			break;

		case EXTI_FALLING_EDGE :
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1694:	a5 e5       	ldi	r26, 0x55	; 85
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e5 e5       	ldi	r30, 0x55	; 85
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8e 7f       	andi	r24, 0xFE	; 254
    16a0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    16a2:	a5 e5       	ldi	r26, 0x55	; 85
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e5 e5       	ldi	r30, 0x55	; 85
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	82 60       	ori	r24, 0x02	; 2
    16ae:	8c 93       	st	X, r24
    16b0:	0e c0       	rjmp	.+28     	; 0x16ce <EXTI_VoidSenseLevel+0x1d0>
			break;

		case EXTI_ON_CHANGE   :
			CLR_BIT(MCUCR,MCUCR_ISC01);
    16b2:	a5 e5       	ldi	r26, 0x55	; 85
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e5 e5       	ldi	r30, 0x55	; 85
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8d 7f       	andi	r24, 0xFD	; 253
    16be:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC00);
    16c0:	a5 e5       	ldi	r26, 0x55	; 85
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e5 e5       	ldi	r30, 0x55	; 85
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	81 60       	ori	r24, 0x01	; 1
    16cc:	8c 93       	st	X, r24
			break;
		}

	}
}
    16ce:	28 96       	adiw	r28, 0x08	; 8
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <EXTI_VoidDesEnabel>:
void EXTI_VoidDesEnabel(u8 INT_NUM)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <EXTI_VoidDesEnabel+0x6>
    16e6:	0f 92       	push	r0
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	89 83       	std	Y+1, r24	; 0x01
	switch (INT_NUM)
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	3b 83       	std	Y+3, r19	; 0x03
    16f6:	2a 83       	std	Y+2, r18	; 0x02
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	9b 81       	ldd	r25, Y+3	; 0x03
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	91 05       	cpc	r25, r1
    1700:	89 f0       	breq	.+34     	; 0x1724 <EXTI_VoidDesEnabel+0x44>
    1702:	2a 81       	ldd	r18, Y+2	; 0x02
    1704:	3b 81       	ldd	r19, Y+3	; 0x03
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	31 05       	cpc	r19, r1
    170a:	a1 f0       	breq	.+40     	; 0x1734 <EXTI_VoidDesEnabel+0x54>
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	b9 f4       	brne	.+46     	; 0x1742 <EXTI_VoidDesEnabel+0x62>
	{
	case EXT_INT0 :
		CLR_BIT(GICR,GICR_INT0); break;
    1714:	ab e5       	ldi	r26, 0x5B	; 91
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	eb e5       	ldi	r30, 0x5B	; 91
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	8f 7b       	andi	r24, 0xBF	; 191
    1720:	8c 93       	st	X, r24
    1722:	0f c0       	rjmp	.+30     	; 0x1742 <EXTI_VoidDesEnabel+0x62>

	case EXT_INT1 :
		CLR_BIT(GICR,GICR_INT1); break;
    1724:	ab e5       	ldi	r26, 0x5B	; 91
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	eb e5       	ldi	r30, 0x5B	; 91
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	8f 77       	andi	r24, 0x7F	; 127
    1730:	8c 93       	st	X, r24
    1732:	07 c0       	rjmp	.+14     	; 0x1742 <EXTI_VoidDesEnabel+0x62>

	case EXT_INT2 :
		CLR_BIT(GICR,GICR_INT2); break;
    1734:	ab e5       	ldi	r26, 0x5B	; 91
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	eb e5       	ldi	r30, 0x5B	; 91
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 7d       	andi	r24, 0xDF	; 223
    1740:	8c 93       	st	X, r24
	}
}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <__vector_1>:
	}

}*/

void __vector_1(void)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	2f 93       	push	r18
    175e:	3f 93       	push	r19
    1760:	4f 93       	push	r20
    1762:	5f 93       	push	r21
    1764:	6f 93       	push	r22
    1766:	7f 93       	push	r23
    1768:	8f 93       	push	r24
    176a:	9f 93       	push	r25
    176c:	af 93       	push	r26
    176e:	bf 93       	push	r27
    1770:	ef 93       	push	r30
    1772:	ff 93       	push	r31
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	u8 static y=0;
	if(y==0)
    177c:	80 91 74 00 	lds	r24, 0x0074
    1780:	88 23       	and	r24, r24
    1782:	69 f4       	brne	.+26     	; 0x179e <__vector_1+0x50>
	{
		TIM0_VoidSetTimerValue(0);
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	0e 94 57 0f 	call	0x1eae	; 0x1eae <TIM0_VoidSetTimerValue>
		Global_Counter = 0;
    178a:	10 92 75 00 	sts	0x0075, r1
		EXTI_VoidSenseLevel(EXT_INT0,EXTI_FALLING_EDGE);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	62 e0       	ldi	r22, 0x02	; 2
    1792:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <EXTI_VoidSenseLevel>
		y=1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	80 93 74 00 	sts	0x0074, r24
    179c:	2d c0       	rjmp	.+90     	; 0x17f8 <__vector_1+0xaa>
	}
	else if (y==1)
    179e:	80 91 74 00 	lds	r24, 0x0074
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	49 f5       	brne	.+82     	; 0x17f8 <__vector_1+0xaa>
	{

		local_timval = (Global_Counter * 256UL) + TIM0_VoidGetTimerValue();
    17a6:	80 91 75 00 	lds	r24, 0x0075
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a0 e0       	ldi	r26, 0x00	; 0
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ba 2f       	mov	r27, r26
    17b4:	a9 2f       	mov	r26, r25
    17b6:	98 2f       	mov	r25, r24
    17b8:	88 27       	eor	r24, r24
    17ba:	8c 01       	movw	r16, r24
    17bc:	0e 94 65 0f 	call	0x1eca	; 0x1eca <TIM0_VoidGetTimerValue>
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	80 0f       	add	r24, r16
    17c6:	91 1f       	adc	r25, r17
    17c8:	90 93 77 00 	sts	0x0077, r25
    17cc:	80 93 76 00 	sts	0x0076, r24
		local_timval /= 58;
    17d0:	80 91 76 00 	lds	r24, 0x0076
    17d4:	90 91 77 00 	lds	r25, 0x0077
    17d8:	2a e3       	ldi	r18, 0x3A	; 58
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	b9 01       	movw	r22, r18
    17de:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__udivmodhi4>
    17e2:	cb 01       	movw	r24, r22
    17e4:	90 93 77 00 	sts	0x0077, r25
    17e8:	80 93 76 00 	sts	0x0076, r24
		EXTI_VoidSenseLevel(EXT_INT0,EXTI_RISYNG_EDGE);
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <EXTI_VoidSenseLevel>
		y=0;
    17f4:	10 92 74 00 	sts	0x0074, r1
	}
}
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	ff 91       	pop	r31
    17fe:	ef 91       	pop	r30
    1800:	bf 91       	pop	r27
    1802:	af 91       	pop	r26
    1804:	9f 91       	pop	r25
    1806:	8f 91       	pop	r24
    1808:	7f 91       	pop	r23
    180a:	6f 91       	pop	r22
    180c:	5f 91       	pop	r21
    180e:	4f 91       	pop	r20
    1810:	3f 91       	pop	r19
    1812:	2f 91       	pop	r18
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <__vector_2>:

void __vector_2(void)
{
    1822:	1f 92       	push	r1
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62

}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <__vector_3>:

void __vector_3(void)
	{
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62

	}
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	0f 90       	pop	r0
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	0f 90       	pop	r0
    185e:	1f 90       	pop	r1
    1860:	18 95       	reti

00001862 <LCD_voidSendCommand>:
#include "LCD_interface.h"

#define CLEAR_LCD_BIT	LCD_voidSendData(' ')

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	2f 97       	sbiw	r28, 0x0f	; 15
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	8f 87       	std	Y+15, r24	; 0x0f
/*1-set RS  with low --> command*/
	DIO_voidSetPinValue( LCD_CTRL_PORT, LCD_RS_PIN, DIO_u8LOW);
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	62 e0       	ldi	r22, 0x02	; 2
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
/*2- SET RW TO LOW TO write*/
	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_u8LOW);
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
/*3-set command on data pins*/
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1890:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_voidSetPortValue>
/*4- Send enable pulse*/
	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_u8HIGH);
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a0 e0       	ldi	r26, 0x00	; 0
    18a4:	b0 e4       	ldi	r27, 0x40	; 64
    18a6:	8b 87       	std	Y+11, r24	; 0x0b
    18a8:	9c 87       	std	Y+12, r25	; 0x0c
    18aa:	ad 87       	std	Y+13, r26	; 0x0d
    18ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a ef       	ldi	r20, 0xFA	; 250
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8f 83       	std	Y+7, r24	; 0x07
    18c8:	98 87       	std	Y+8, r25	; 0x08
    18ca:	a9 87       	std	Y+9, r26	; 0x09
    18cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ce:	6f 81       	ldd	r22, Y+7	; 0x07
    18d0:	78 85       	ldd	r23, Y+8	; 0x08
    18d2:	89 85       	ldd	r24, Y+9	; 0x09
    18d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	4c f5       	brge	.+82     	; 0x195a <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	7c 85       	ldd	r23, Y+12	; 0x0c
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <LCD_voidSendCommand+0xee>
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <LCD_voidSendCommand+0xdc>
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9e 83       	std	Y+6, r25	; 0x06
    194e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	69 f7       	brne	.-38     	; 0x1932 <LCD_voidSendCommand+0xd0>
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	6f 81       	ldd	r22, Y+7	; 0x07
    195c:	78 85       	ldd	r23, Y+8	; 0x08
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9e 83       	std	Y+6, r25	; 0x06
    196c:	8d 83       	std	Y+5, r24	; 0x05
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	9a 81       	ldd	r25, Y+2	; 0x02
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <LCD_voidSendCommand+0x118>
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_u8LOW);
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>



}
    198c:	2f 96       	adiw	r28, 0x0f	; 15
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <LCD_voidSendData>:
void LCD_voidSendData(u8 Copy_u8Data)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	2f 97       	sbiw	r28, 0x0f	; 15
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	8f 87       	std	Y+15, r24	; 0x0f
	/*1-set RS  with high --> command*/
		DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_u8HIGH);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	62 e0       	ldi	r22, 0x02	; 2
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	/*2- SET RW TO LOW TO write*/
		DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_u8LOW);
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
	/*3-set command on data pins*/
		DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    19cc:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_voidSetPortValue>
	/*4- Send enable pulse*/
		DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_u8HIGH);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a0 e0       	ldi	r26, 0x00	; 0
    19e0:	b0 e4       	ldi	r27, 0x40	; 64
    19e2:	8b 87       	std	Y+11, r24	; 0x0b
    19e4:	9c 87       	std	Y+12, r25	; 0x0c
    19e6:	ad 87       	std	Y+13, r26	; 0x0d
    19e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a ef       	ldi	r20, 0xFA	; 250
    19f8:	54 e4       	ldi	r21, 0x44	; 68
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8f 83       	std	Y+7, r24	; 0x07
    1a04:	98 87       	std	Y+8, r25	; 0x08
    1a06:	a9 87       	std	Y+9, r26	; 0x09
    1a08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0c:	78 85       	ldd	r23, Y+8	; 0x08
    1a0e:	89 85       	ldd	r24, Y+9	; 0x09
    1a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <LCD_voidSendData+0x8e>
		__ticks = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
    1a2a:	3f c0       	rjmp	.+126    	; 0x1aaa <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2e:	78 85       	ldd	r23, Y+8	; 0x08
    1a30:	89 85       	ldd	r24, Y+9	; 0x09
    1a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	3f ef       	ldi	r19, 0xFF	; 255
    1a38:	4f e7       	ldi	r20, 0x7F	; 127
    1a3a:	57 e4       	ldi	r21, 0x47	; 71
    1a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	4c f5       	brge	.+82     	; 0x1a96 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	51 e4       	ldi	r21, 0x41	; 65
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <LCD_voidSendData+0xee>
    1a6e:	88 ec       	ldi	r24, 0xC8	; 200
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_voidSendData+0xdc>
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <LCD_voidSendData+0xd0>
    1a94:	14 c0       	rjmp	.+40     	; 0x1abe <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	6f 81       	ldd	r22, Y+7	; 0x07
    1a98:	78 85       	ldd	r23, Y+8	; 0x08
    1a9a:	89 85       	ldd	r24, Y+9	; 0x09
    1a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_voidSendData+0x118>
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_u8LOW);
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
}
    1ac8:	2f 96       	adiw	r28, 0x0f	; 15
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <LCD_voidInit>:

void LCD_voidInit(void)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	2e 97       	sbiw	r28, 0x0e	; 14
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0xff);
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	6f ef       	ldi	r22, 0xFF	; 255
    1af2:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, DIO_u8PIN_0, DIO_u8OUTPUT);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, DIO_u8PIN_1, DIO_u8OUTPUT);
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, DIO_u8PIN_2, DIO_u8OUTPUT);
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	62 e0       	ldi	r22, 0x02	; 2
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a0 ef       	ldi	r26, 0xF0	; 240
    1b1a:	b1 e4       	ldi	r27, 0x41	; 65
    1b1c:	8b 87       	std	Y+11, r24	; 0x0b
    1b1e:	9c 87       	std	Y+12, r25	; 0x0c
    1b20:	ad 87       	std	Y+13, r26	; 0x0d
    1b22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4a ef       	ldi	r20, 0xFA	; 250
    1b32:	54 e4       	ldi	r21, 0x44	; 68
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	8f 83       	std	Y+7, r24	; 0x07
    1b3e:	98 87       	std	Y+8, r25	; 0x08
    1b40:	a9 87       	std	Y+9, r26	; 0x09
    1b42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b44:	6f 81       	ldd	r22, Y+7	; 0x07
    1b46:	78 85       	ldd	r23, Y+8	; 0x08
    1b48:	89 85       	ldd	r24, Y+9	; 0x09
    1b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <LCD_voidInit+0x8c>
		__ticks = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	3f c0       	rjmp	.+126    	; 0x1be4 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1b66:	6f 81       	ldd	r22, Y+7	; 0x07
    1b68:	78 85       	ldd	r23, Y+8	; 0x08
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	3f ef       	ldi	r19, 0xFF	; 255
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	57 e4       	ldi	r21, 0x47	; 71
    1b76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b7a:	18 16       	cp	r1, r24
    1b7c:	4c f5       	brge	.+82     	; 0x1bd0 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9e 83       	std	Y+6, r25	; 0x06
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
    1ba6:	0f c0       	rjmp	.+30     	; 0x1bc6 <LCD_voidInit+0xec>
    1ba8:	88 ec       	ldi	r24, 0xC8	; 200
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9c 83       	std	Y+4, r25	; 0x04
    1bae:	8b 83       	std	Y+3, r24	; 0x03
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_voidInit+0xda>
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	69 f7       	brne	.-38     	; 0x1ba8 <LCD_voidInit+0xce>
    1bce:	14 c0       	rjmp	.+40     	; 0x1bf8 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_voidInit+0x116>
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(30);
	LCD_voidSendCommand(0b00111000);
    1bf8:	88 e3       	ldi	r24, 0x38	; 56
    1bfa:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_voidSendCommand>

	LCD_voidSendCommand(0b00001100);
    1bfe:	8c e0       	ldi	r24, 0x0C	; 12
    1c00:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_voidSendCommand>

	LCD_voidSendCommand(1);
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_voidSendCommand>
}
    1c0a:	2e 96       	adiw	r28, 0x0e	; 14
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <LCD_voidSendString>:

void LCD_voidSendString(char * Copy_Pstring)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <LCD_voidSendString+0x6>
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	9b 83       	std	Y+3, r25	; 0x03
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Itretion=0;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	0e c0       	rjmp	.+28     	; 0x1c4c <LCD_voidSendString+0x30>
	while( Copy_Pstring[Local_u8Itretion]!='\0')
	{
		LCD_voidSendData(Copy_Pstring[Local_u8Itretion]);
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e2 0f       	add	r30, r18
    1c3e:	f3 1f       	adc	r31, r19
    1c40:	80 81       	ld	r24, Z
    1c42:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_voidSendData>
		Local_u8Itretion ++;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	8f 5f       	subi	r24, 0xFF	; 255
    1c4a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(char * Copy_Pstring)
{
	u8 Local_u8Itretion=0;
	while( Copy_Pstring[Local_u8Itretion]!='\0')
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	9b 81       	ldd	r25, Y+3	; 0x03
    1c56:	fc 01       	movw	r30, r24
    1c58:	e2 0f       	add	r30, r18
    1c5a:	f3 1f       	adc	r31, r19
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	39 f7       	brne	.-50     	; 0x1c30 <LCD_voidSendString+0x14>
		LCD_voidSendData(Copy_Pstring[Local_u8Itretion]);
		Local_u8Itretion ++;
	}


}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <LCD_VoidGotoXY>:

void LCD_VoidGotoXY(u8 Copy_U8XPos, u8 Copy_U8YPos)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <LCD_VoidGotoXY+0x6>
    1c74:	0f 92       	push	r0
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	8a 83       	std	Y+2, r24	; 0x02
    1c7c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address ;
	if (Copy_U8XPos==0)
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	88 23       	and	r24, r24
    1c82:	39 f4       	brne	.+14     	; 0x1c92 <LCD_VoidGotoXY+0x24>
	{
		Local_u8Address = Copy_U8YPos;
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(128+Local_u8Address);
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	80 58       	subi	r24, 0x80	; 128
    1c8c:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_voidSendCommand>
    1c90:	0a c0       	rjmp	.+20     	; 0x1ca6 <LCD_VoidGotoXY+0x38>


	}
	else if (Copy_U8XPos==1)
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	39 f4       	brne	.+14     	; 0x1ca6 <LCD_VoidGotoXY+0x38>
	{
		Local_u8Address = 0x40+Copy_U8YPos;
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	80 5c       	subi	r24, 0xC0	; 192
    1c9c:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(128+Local_u8Address);
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	80 58       	subi	r24, 0x80	; 128
    1ca2:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_voidSendCommand>
	{

	}


}
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <LCD_VoidSpecialCaCharactar>:

void LCD_VoidSpecialCaCharactar(u8 Copy_u8Pattern[][8],u8 Copy_U8CharactarNum)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <LCD_VoidSpecialCaCharactar+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <LCD_VoidSpecialCaCharactar+0x8>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <LCD_VoidSpecialCaCharactar+0xa>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	9d 83       	std	Y+5, r25	; 0x05
    1cc2:	8c 83       	std	Y+4, r24	; 0x04
    1cc4:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_u8Address;
	u8 Local_u8Counter;
	u8 Local_u8Counter2;

	//calc cgram block address
	for ( Local_u8Counter2=0;Local_u8Counter2<Copy_U8CharactarNum;Local_u8Counter2++)
    1cc6:	19 82       	std	Y+1, r1	; 0x01
    1cc8:	30 c0       	rjmp	.+96     	; 0x1d2a <LCD_VoidSpecialCaCharactar+0x78>
	{
	  Local_u8Address = Local_u8Counter2*8;
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	8b 83       	std	Y+3, r24	; 0x03

	LCD_voidSendCommand(Local_u8Address+64);
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	80 5c       	subi	r24, 0xC0	; 192
    1ce2:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_voidSendCommand>


	for (Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1ce6:	1a 82       	std	Y+2, r1	; 0x02
    1ce8:	1a c0       	rjmp	.+52     	; 0x1d1e <LCD_VoidSpecialCaCharactar+0x6c>
	{

		LCD_voidSendData(Copy_u8Pattern[Local_u8Counter2][Local_u8Counter]);
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	22 0f       	add	r18, r18
    1cf8:	33 1f       	adc	r19, r19
    1cfa:	22 0f       	add	r18, r18
    1cfc:	33 1f       	adc	r19, r19
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	9d 81       	ldd	r25, Y+5	; 0x05
    1d02:	28 0f       	add	r18, r24
    1d04:	39 1f       	adc	r19, r25
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	f9 01       	movw	r30, r18
    1d0e:	e8 0f       	add	r30, r24
    1d10:	f9 1f       	adc	r31, r25
    1d12:	80 81       	ld	r24, Z
    1d14:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_voidSendData>
	  Local_u8Address = Local_u8Counter2*8;

	LCD_voidSendCommand(Local_u8Address+64);


	for (Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	8f 5f       	subi	r24, 0xFF	; 255
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	88 30       	cpi	r24, 0x08	; 8
    1d22:	18 f3       	brcs	.-58     	; 0x1cea <LCD_VoidSpecialCaCharactar+0x38>
	u8 Local_u8Address;
	u8 Local_u8Counter;
	u8 Local_u8Counter2;

	//calc cgram block address
	for ( Local_u8Counter2=0;Local_u8Counter2<Copy_U8CharactarNum;Local_u8Counter2++)
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	99 81       	ldd	r25, Y+1	; 0x01
    1d2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2e:	98 17       	cp	r25, r24
    1d30:	60 f2       	brcs	.-104    	; 0x1cca <LCD_VoidSpecialCaCharactar+0x18>
		LCD_voidSendData(Copy_u8Pattern[Local_u8Counter2][Local_u8Counter]);
	}


	}
}
    1d32:	26 96       	adiw	r28, 0x06	; 6
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <LCD_Clear_Bits>:


void LCD_Clear_Bits(u8 num){
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <LCD_Clear_Bits+0x6>
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i = 0; i<num; i++)
    1d50:	19 82       	std	Y+1, r1	; 0x01
    1d52:	06 c0       	rjmp	.+12     	; 0x1d60 <LCD_Clear_Bits+0x1c>
	{
		CLEAR_LCD_BIT;
    1d54:	80 e2       	ldi	r24, 0x20	; 32
    1d56:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_voidSendData>
	}
}


void LCD_Clear_Bits(u8 num){
	for(u8 i = 0; i<num; i++)
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	8f 5f       	subi	r24, 0xFF	; 255
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	99 81       	ldd	r25, Y+1	; 0x01
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	98 17       	cp	r25, r24
    1d66:	b0 f3       	brcs	.-20     	; 0x1d54 <LCD_Clear_Bits+0x10>
	{
		CLEAR_LCD_BIT;
	}

}
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <print_num>:
void print_num(u16 y)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	2b 97       	sbiw	r28, 0x0b	; 11
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	9b 87       	std	Y+11, r25	; 0x0b
    1d88:	8a 87       	std	Y+10, r24	; 0x0a
	u8 e=0;
    1d8a:	1a 82       	std	Y+2, r1	; 0x02
	s8 i;
   u8 arr[7]={0};
    1d8c:	87 e0       	ldi	r24, 0x07	; 7
    1d8e:	fe 01       	movw	r30, r28
    1d90:	33 96       	adiw	r30, 0x03	; 3
    1d92:	df 01       	movw	r26, r30
    1d94:	98 2f       	mov	r25, r24
    1d96:	1d 92       	st	X+, r1
    1d98:	9a 95       	dec	r25
    1d9a:	e9 f7       	brne	.-6      	; 0x1d96 <print_num+0x24>
    1d9c:	1d c0       	rjmp	.+58     	; 0x1dd8 <print_num+0x66>
	while (y!=0)
	{
		arr[e]=(y % 10);
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	e8 2f       	mov	r30, r24
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1da8:	2a e0       	ldi	r18, 0x0A	; 10
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	b9 01       	movw	r22, r18
    1dae:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__udivmodhi4>
    1db2:	28 2f       	mov	r18, r24
    1db4:	ce 01       	movw	r24, r28
    1db6:	03 96       	adiw	r24, 0x03	; 3
    1db8:	e8 0f       	add	r30, r24
    1dba:	f9 1f       	adc	r31, r25
    1dbc:	20 83       	st	Z, r18
		//LCD_VoidGotoXY(0,15-e);
		y/=10;
    1dbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc2:	2a e0       	ldi	r18, 0x0A	; 10
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	b9 01       	movw	r22, r18
    1dc8:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__udivmodhi4>
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9b 87       	std	Y+11, r25	; 0x0b
    1dd0:	8a 87       	std	Y+10, r24	; 0x0a
		e++;
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	8a 83       	std	Y+2, r24	; 0x02
void print_num(u16 y)
{
	u8 e=0;
	s8 i;
   u8 arr[7]={0};
	while (y!=0)
    1dd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	f9 f6       	brne	.-66     	; 0x1d9e <print_num+0x2c>
		arr[e]=(y % 10);
		//LCD_VoidGotoXY(0,15-e);
		y/=10;
		e++;
	}
	for( i =(e-1);i>=0;i--)
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	81 50       	subi	r24, 0x01	; 1
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	11 c0       	rjmp	.+34     	; 0x1e0a <print_num+0x98>
	{
		LCD_voidSendData(arr[i]+'0');
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	33 27       	eor	r19, r19
    1dee:	27 fd       	sbrc	r18, 7
    1df0:	30 95       	com	r19
    1df2:	ce 01       	movw	r24, r28
    1df4:	03 96       	adiw	r24, 0x03	; 3
    1df6:	fc 01       	movw	r30, r24
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f3 1f       	adc	r31, r19
    1dfc:	80 81       	ld	r24, Z
    1dfe:	80 5d       	subi	r24, 0xD0	; 208
    1e00:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_voidSendData>
		arr[e]=(y % 10);
		//LCD_VoidGotoXY(0,15-e);
		y/=10;
		e++;
	}
	for( i =(e-1);i>=0;i--)
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	81 50       	subi	r24, 0x01	; 1
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	88 23       	and	r24, r24
    1e0e:	64 f7       	brge	.-40     	; 0x1de8 <print_num+0x76>
	{
		LCD_voidSendData(arr[i]+'0');
	}

}
    1e10:	2b 96       	adiw	r28, 0x0b	; 11
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <TIM0_VoidInt>:
#include "tim_confg.h"
#include "Dio_interface.h"

extern u8 Global_Counter;
void TIM0_VoidInt(void)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK ,TIMSK_TOIE0  );
    1e2a:	a9 e5       	ldi	r26, 0x59	; 89
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e9 e5       	ldi	r30, 0x59	; 89
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	81 60       	ori	r24, 0x01	; 1
    1e36:	8c 93       	st	X, r24
	//SET_BIT(TIMSK ,TIMSK_OCIE0   );
	TCCR0  = TCCR0 & 0xf8 ;
    1e38:	a3 e5       	ldi	r26, 0x53	; 83
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e3 e5       	ldi	r30, 0x53	; 83
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	88 7f       	andi	r24, 0xF8	; 248
    1e44:	8c 93       	st	X, r24
	TCCR0 |= TIM0_Prescal ;
    1e46:	a3 e5       	ldi	r26, 0x53	; 83
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e3 e5       	ldi	r30, 0x53	; 83
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	82 60       	ori	r24, 0x02	; 2
    1e52:	8c 93       	st	X, r24
		SET_BIT(TCCR0 ,TCCR0_COM01 );
		break;

	}
#elif(TIM0_Mod== tim0_pwmfast)
	SET_BIT(TCCR0 ,TCCR0_WGM00 );
    1e54:	a3 e5       	ldi	r26, 0x53	; 83
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e3 e5       	ldi	r30, 0x53	; 83
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	80 64       	ori	r24, 0x40	; 64
    1e60:	8c 93       	st	X, r24
	SET_BIT(TCCR0 ,TCCR0_WGM01 );
    1e62:	a3 e5       	ldi	r26, 0x53	; 83
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e3 e5       	ldi	r30, 0x53	; 83
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 60       	ori	r24, 0x08	; 8
    1e6e:	8c 93       	st	X, r24
	case OC0_invert :
		SET_BIT(TCCR0 ,TCCR0_COM00 );
		SET_BIT(TCCR0 ,TCCR0_COM01 );
		break;
	case OC0_noninvert :
		CLR_BIT(TCCR0 ,TCCR0_COM00 );
    1e70:	a3 e5       	ldi	r26, 0x53	; 83
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e3 e5       	ldi	r30, 0x53	; 83
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 7e       	andi	r24, 0xEF	; 239
    1e7c:	8c 93       	st	X, r24
		SET_BIT(TCCR0 ,TCCR0_COM01 );
    1e7e:	a3 e5       	ldi	r26, 0x53	; 83
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e3 e5       	ldi	r30, 0x53	; 83
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	80 62       	ori	r24, 0x20	; 32
    1e8a:	8c 93       	st	X, r24


#endif


}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <PWM_VoidSetOCR0>:
void PWM_VoidSetOCR0(u8 Copy_u8OCR0Valu)
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	0f 92       	push	r0
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8OCR0Valu ;
    1e9e:	ec e5       	ldi	r30, 0x5C	; 92
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	80 83       	st	Z, r24
}
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <TIM0_VoidSetTimerValue>:
void TIM0_VoidSetTimerValue(u8 value)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	0f 92       	push	r0
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
    1eba:	e2 e5       	ldi	r30, 0x52	; 82
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	80 83       	st	Z, r24
}
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <TIM0_VoidGetTimerValue>:
u8 TIM0_VoidGetTimerValue(void)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1ed2:	e2 e5       	ldi	r30, 0x52	; 82
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
}
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <TIM1_VoidInt>:




void TIM1_VoidInt(void)
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
	// PRESCALER .....
	TCCR1B &=0XF8;
    1ee6:	ae e4       	ldi	r26, 0x4E	; 78
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	ee e4       	ldi	r30, 0x4E	; 78
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 7f       	andi	r24, 0xF8	; 248
    1ef2:	8c 93       	st	X, r24
	TCCR1B |=TIM1_Prescal;
    1ef4:	ae e4       	ldi	r26, 0x4E	; 78
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	ee e4       	ldi	r30, 0x4E	; 78
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	82 60       	ori	r24, 0x02	; 2
    1f00:	8c 93       	st	X, r24
	TCCR1B |=24;
	//TCCR1A |=(WAVGENEGATION-12);
	TCCR1A |= (TIM1_NOPWM_MOD_OC1A*64);
	TCCR1A |= (TIM1_NOPWM_MOD_OC1B*16);
#elif(WAVGENEGATION==14)
	TCCR1A &=0x0c;
    1f02:	af e4       	ldi	r26, 0x4F	; 79
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	ef e4       	ldi	r30, 0x4F	; 79
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8c 70       	andi	r24, 0x0C	; 12
    1f0e:	8c 93       	st	X, r24
	TCCR1B &=0xe7;
    1f10:	ae e4       	ldi	r26, 0x4E	; 78
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	ee e4       	ldi	r30, 0x4E	; 78
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	87 7e       	andi	r24, 0xE7	; 231
    1f1c:	8c 93       	st	X, r24
	TCCR1B |=24;
    1f1e:	ae e4       	ldi	r26, 0x4E	; 78
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	ee e4       	ldi	r30, 0x4E	; 78
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	88 61       	ori	r24, 0x18	; 24
    1f2a:	8c 93       	st	X, r24
	TCCR1A |=(WAVGENEGATION-12);
    1f2c:	af e4       	ldi	r26, 0x4F	; 79
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ef e4       	ldi	r30, 0x4F	; 79
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	82 60       	ori	r24, 0x02	; 2
    1f38:	8c 93       	st	X, r24
	TCCR1A |= (TIM0_FASTPWM_MOD_OC1A*64);
    1f3a:	af e4       	ldi	r26, 0x4F	; 79
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	ef e4       	ldi	r30, 0x4F	; 79
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	80 68       	ori	r24, 0x80	; 128
    1f46:	8c 93       	st	X, r24
	TCCR1A |= (TIM0_FASTPWM_MOD_OC1B*16);
    1f48:	af e4       	ldi	r26, 0x4F	; 79
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	ef e4       	ldi	r30, 0x4F	; 79
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	8c 93       	st	X, r24
#warning ""


#endif

}
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <TIM1_TOPVALU>:
void TIM1_TOPVALU(u16 Copy_u16TopValu)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <TIM1_TOPVALU+0x6>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
	ICR1L = Copy_u16TopValu ;
    1f68:	e6 e4       	ldi	r30, 0x46	; 70
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	91 83       	std	Z+1, r25	; 0x01
    1f72:	80 83       	st	Z, r24
}
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <TIM1_SETCHANALCOMPERMATCH>:

void TIM1_SETCHANALCOMPERMATCH(u16 Copy_u16Toutcompermatch)
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <TIM1_SETCHANALCOMPERMATCH+0x6>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL = Copy_u16Toutcompermatch ;
    1f8c:	ea e4       	ldi	r30, 0x4A	; 74
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <TIM1_VoidSetTimerValue>:

void TIM1_VoidSetTimerValue(u16 value)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <TIM1_VoidSetTimerValue+0x6>
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L = value;
    1fb0:	ec e4       	ldi	r30, 0x4C	; 76
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <TIM1_VoidGetTimerValue>:
u16 TIM1_VoidGetTimerValue(void)
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
	return TCNT1L;
    1fce:	ec e4       	ldi	r30, 0x4C	; 76
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
}
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <__vector_11>:
	{
	  TIM_pvTIM0FUNC = copy_pvtntfun;
	}
}*/
void __vector_11(void)
{
    1fdc:	1f 92       	push	r1
    1fde:	0f 92       	push	r0
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	0f 92       	push	r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	8f 93       	push	r24
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62

	Global_Counter ++;
    1ff0:	80 91 75 00 	lds	r24, 0x0075
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	80 93 75 00 	sts	0x0075, r24

}
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	8f 91       	pop	r24
    2000:	0f 90       	pop	r0
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	0f 90       	pop	r0
    2006:	1f 90       	pop	r1
    2008:	18 95       	reti

0000200a <PWM_VoidSetOCR2>:




void PWM_VoidSetOCR2(u8 Copy_u8OCR0Valu)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8OCR0Valu;
    2016:	e3 e4       	ldi	r30, 0x43	; 67
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	80 83       	st	Z, r24
}
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <TIM2_VoidInt>:
void TIM2_VoidInt(void)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
	TCCR2  = TCCR2 & 0xf8 ;
    202e:	a5 e4       	ldi	r26, 0x45	; 69
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e5 e4       	ldi	r30, 0x45	; 69
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	88 7f       	andi	r24, 0xF8	; 248
    203a:	8c 93       	st	X, r24
		TCCR2 |= TIM2_Prescal ;
    203c:	a5 e4       	ldi	r26, 0x45	; 69
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e5 e4       	ldi	r30, 0x45	; 69
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	82 60       	ori	r24, 0x02	; 2
    2048:	8c 93       	st	X, r24
			SET_BIT(TCCR2 ,TCCR2_COM21 );
			break;

		}
	#elif(TIM2_Mod== tim2_pwmfast)
		SET_BIT(TCCR2 ,TCCR2_WGM20 );
    204a:	a5 e4       	ldi	r26, 0x45	; 69
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e5 e4       	ldi	r30, 0x45	; 69
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	80 64       	ori	r24, 0x40	; 64
    2056:	8c 93       	st	X, r24
		SET_BIT(TCCR2 ,TCCR2_WGM21 );
    2058:	a5 e4       	ldi	r26, 0x45	; 69
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e5 e4       	ldi	r30, 0x45	; 69
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	88 60       	ori	r24, 0x08	; 8
    2064:	8c 93       	st	X, r24
		case OC2_invert :
			SET_BIT(TCCR2 ,TCCR2_COM20  );
			SET_BIT(TCCR2 ,TCCR2_COM21);
			break;
		case OC2_noninvert :
			CLR_BIT(TCCR2 ,TCCR2_COM20  );
    2066:	a5 e4       	ldi	r26, 0x45	; 69
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e5 e4       	ldi	r30, 0x45	; 69
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	8f 7e       	andi	r24, 0xEF	; 239
    2072:	8c 93       	st	X, r24
			SET_BIT(TCCR2 ,TCCR2_COM21  );
    2074:	a5 e4       	ldi	r26, 0x45	; 69
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e5 e4       	ldi	r30, 0x45	; 69
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	80 62       	ori	r24, 0x20	; 32
    2080:	8c 93       	st	X, r24


	#endif


	}
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <TIM2_VoidGetTimerValue>:


u8 TIM2_VoidGetTimerValue(void)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    2090:	e4 e4       	ldi	r30, 0x44	; 68
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z

}
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <TIM2_VoidSetTimerValue>:
void TIM2_VoidSetTimerValue(u8 value)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = value;
    20a8:	e4 e4       	ldi	r30, 0x44	; 68
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	80 83       	st	Z, r24
}
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <Servo_void_Init>:





void Servo_void_Init(u16 TopValue){
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <Servo_void_Init+0x6>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(DIO_u8PORT_D, DIO_u8PIN_5, DIO_u8OUTPUT); //Servo PWM Signal
    20c6:	83 e0       	ldi	r24, 0x03	; 3
    20c8:	65 e0       	ldi	r22, 0x05	; 5
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	TIM1_VoidInt();
    20d0:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <TIM1_VoidInt>
	TIM1_TOPVALU(TopValue);
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <TIM1_TOPVALU>
}
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <GLOBEL_INTENABEL>:
#include "globel_int_interface.h"
#include "bit_math.h"
#include "std_types.h"
#include "globel_inte.h"
void GLOBEL_INTENABEL(void)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62

	SET_BIT( SREG , SREG_EIG);
    20ee:	af e5       	ldi	r26, 0x5F	; 95
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	ef e5       	ldi	r30, 0x5F	; 95
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	80 68       	ori	r24, 0x80	; 128
    20fa:	8c 93       	st	X, r24
}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <main>:
u8 Global_Counter = 0;
u32 local_timval = 0;



int main(void){
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	64 97       	sbiw	r28, 0x14	; 20
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
	DC_MOTOR_void_init();
    2116:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DC_MOTOR_void_init>
	ULT_Int();
    211a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <ULT_Int>
	LCD_voidInit();
    211e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidInit>
	Servo_void_Init(20000);
    2122:	80 e2       	ldi	r24, 0x20	; 32
    2124:	9e e4       	ldi	r25, 0x4E	; 78
    2126:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <Servo_void_Init>
	LCD_voidSendString("DISTANCE : ");
    212a:	80 e6       	ldi	r24, 0x60	; 96
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_voidSendString>
	u16 distance = 0;
    2132:	1c 8a       	std	Y+20, r1	; 0x14
    2134:	1b 8a       	std	Y+19, r1	; 0x13
	while(1)
	{
		distance = ULT_Read();
    2136:	0e 94 8a 11 	call	0x2314	; 0x2314 <ULT_Read>
    213a:	9c 8b       	std	Y+20, r25	; 0x14
    213c:	8b 8b       	std	Y+19, r24	; 0x13
		LCD_VoidGotoXY(0,12);
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	6c e0       	ldi	r22, 0x0C	; 12
    2142:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_VoidGotoXY>
		print_num(distance);
    2146:	8b 89       	ldd	r24, Y+19	; 0x13
    2148:	9c 89       	ldd	r25, Y+20	; 0x14
    214a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <print_num>
		LCD_Clear_Bits(2);
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_Clear_Bits>

		if (distance<30)
    2154:	8b 89       	ldd	r24, Y+19	; 0x13
    2156:	9c 89       	ldd	r25, Y+20	; 0x14
    2158:	8e 31       	cpi	r24, 0x1E	; 30
    215a:	91 05       	cpc	r25, r1
    215c:	08 f0       	brcs	.+2      	; 0x2160 <main+0x5e>
    215e:	c0 c0       	rjmp	.+384    	; 0x22e0 <main+0x1de>
		{
			DC_MOTOR_STOP();
    2160:	0e 94 0a 07 	call	0xe14	; 0xe14 <DC_MOTOR_STOP>
			for(u16 i = 1500 ; i <= 2000; i+=100)
    2164:	8c ed       	ldi	r24, 0xDC	; 220
    2166:	95 e0       	ldi	r25, 0x05	; 5
    2168:	9a 8b       	std	Y+18, r25	; 0x12
    216a:	89 8b       	std	Y+17, r24	; 0x11
    216c:	17 c0       	rjmp	.+46     	; 0x219c <main+0x9a>
			{
				TIM1_SETCHANALCOMPERMATCH(i);
    216e:	89 89       	ldd	r24, Y+17	; 0x11
    2170:	9a 89       	ldd	r25, Y+18	; 0x12
    2172:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <TIM1_SETCHANALCOMPERMATCH>
				distance = ULT_Read();
    2176:	0e 94 8a 11 	call	0x2314	; 0x2314 <ULT_Read>
    217a:	9c 8b       	std	Y+20, r25	; 0x14
    217c:	8b 8b       	std	Y+19, r24	; 0x13
				if(distance > 30){
    217e:	8b 89       	ldd	r24, Y+19	; 0x13
    2180:	9c 89       	ldd	r25, Y+20	; 0x14
    2182:	8f 31       	cpi	r24, 0x1F	; 31
    2184:	91 05       	cpc	r25, r1
    2186:	20 f0       	brcs	.+8      	; 0x2190 <main+0x8e>
					Move_right(200);
    2188:	88 ec       	ldi	r24, 0xC8	; 200
    218a:	0e 94 66 06 	call	0xccc	; 0xccc <Move_right>
    218e:	0c c0       	rjmp	.+24     	; 0x21a8 <main+0xa6>
		LCD_Clear_Bits(2);

		if (distance<30)
		{
			DC_MOTOR_STOP();
			for(u16 i = 1500 ; i <= 2000; i+=100)
    2190:	89 89       	ldd	r24, Y+17	; 0x11
    2192:	9a 89       	ldd	r25, Y+18	; 0x12
    2194:	8c 59       	subi	r24, 0x9C	; 156
    2196:	9f 4f       	sbci	r25, 0xFF	; 255
    2198:	9a 8b       	std	Y+18, r25	; 0x12
    219a:	89 8b       	std	Y+17, r24	; 0x11
    219c:	89 89       	ldd	r24, Y+17	; 0x11
    219e:	9a 89       	ldd	r25, Y+18	; 0x12
    21a0:	27 e0       	ldi	r18, 0x07	; 7
    21a2:	81 3d       	cpi	r24, 0xD1	; 209
    21a4:	92 07       	cpc	r25, r18
    21a6:	18 f3       	brcs	.-58     	; 0x216e <main+0x6c>
				if(distance > 30){
					Move_right(200);
					break;
				}
			}
			for(u16 i = 2000 ; i >= 1000; i-=100)
    21a8:	80 ed       	ldi	r24, 0xD0	; 208
    21aa:	97 e0       	ldi	r25, 0x07	; 7
    21ac:	98 8b       	std	Y+16, r25	; 0x10
    21ae:	8f 87       	std	Y+15, r24	; 0x0f
    21b0:	17 c0       	rjmp	.+46     	; 0x21e0 <main+0xde>
			{
				TIM1_SETCHANALCOMPERMATCH(i);
    21b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b4:	98 89       	ldd	r25, Y+16	; 0x10
    21b6:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <TIM1_SETCHANALCOMPERMATCH>
				distance = ULT_Read();
    21ba:	0e 94 8a 11 	call	0x2314	; 0x2314 <ULT_Read>
    21be:	9c 8b       	std	Y+20, r25	; 0x14
    21c0:	8b 8b       	std	Y+19, r24	; 0x13
				if(distance > 30){
    21c2:	8b 89       	ldd	r24, Y+19	; 0x13
    21c4:	9c 89       	ldd	r25, Y+20	; 0x14
    21c6:	8f 31       	cpi	r24, 0x1F	; 31
    21c8:	91 05       	cpc	r25, r1
    21ca:	20 f0       	brcs	.+8      	; 0x21d4 <main+0xd2>
					Move_left(200);
    21cc:	88 ec       	ldi	r24, 0xC8	; 200
    21ce:	0e 94 87 06 	call	0xd0e	; 0xd0e <Move_left>
    21d2:	0c c0       	rjmp	.+24     	; 0x21ec <main+0xea>
				if(distance > 30){
					Move_right(200);
					break;
				}
			}
			for(u16 i = 2000 ; i >= 1000; i-=100)
    21d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d6:	98 89       	ldd	r25, Y+16	; 0x10
    21d8:	84 56       	subi	r24, 0x64	; 100
    21da:	90 40       	sbci	r25, 0x00	; 0
    21dc:	98 8b       	std	Y+16, r25	; 0x10
    21de:	8f 87       	std	Y+15, r24	; 0x0f
    21e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e2:	98 89       	ldd	r25, Y+16	; 0x10
    21e4:	23 e0       	ldi	r18, 0x03	; 3
    21e6:	88 3e       	cpi	r24, 0xE8	; 232
    21e8:	92 07       	cpc	r25, r18
    21ea:	18 f7       	brcc	.-58     	; 0x21b2 <main+0xb0>
				if(distance > 30){
					Move_left(200);
					break;
				}
			}
			TIM1_SETCHANALCOMPERMATCH(1500);
    21ec:	8c ed       	ldi	r24, 0xDC	; 220
    21ee:	95 e0       	ldi	r25, 0x05	; 5
    21f0:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <TIM1_SETCHANALCOMPERMATCH>
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	aa ef       	ldi	r26, 0xFA	; 250
    21fa:	b3 e4       	ldi	r27, 0x43	; 67
    21fc:	8b 87       	std	Y+11, r24	; 0x0b
    21fe:	9c 87       	std	Y+12, r25	; 0x0c
    2200:	ad 87       	std	Y+13, r26	; 0x0d
    2202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6b 85       	ldd	r22, Y+11	; 0x0b
    2206:	7c 85       	ldd	r23, Y+12	; 0x0c
    2208:	8d 85       	ldd	r24, Y+13	; 0x0d
    220a:	9e 85       	ldd	r25, Y+14	; 0x0e
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a ef       	ldi	r20, 0xFA	; 250
    2212:	54 e4       	ldi	r21, 0x44	; 68
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	8f 83       	std	Y+7, r24	; 0x07
    221e:	98 87       	std	Y+8, r25	; 0x08
    2220:	a9 87       	std	Y+9, r26	; 0x09
    2222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <main+0x144>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <main+0x1c2>
	else if (__tmp > 65535)
    2246:	6f 81       	ldd	r22, Y+7	; 0x07
    2248:	78 85       	ldd	r23, Y+8	; 0x08
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <main+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2260:	7c 85       	ldd	r23, Y+12	; 0x0c
    2262:	8d 85       	ldd	r24, Y+13	; 0x0d
    2264:	9e 85       	ldd	r25, Y+14	; 0x0e
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <main+0x1a4>
    2288:	88 ec       	ldi	r24, 0xC8	; 200
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <main+0x192>
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <main+0x186>
    22ae:	14 c0       	rjmp	.+40     	; 0x22d8 <main+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	9a 81       	ldd	r25, Y+2	; 0x02
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <main+0x1ce>
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			GO_Straight(200);
    22d8:	88 ec       	ldi	r24, 0xC8	; 200
    22da:	0e 94 a8 06 	call	0xd50	; 0xd50 <GO_Straight>
    22de:	2b cf       	rjmp	.-426    	; 0x2136 <main+0x34>
		}
		else
		{
			GO_Straight(200);
    22e0:	88 ec       	ldi	r24, 0xC8	; 200
    22e2:	0e 94 a8 06 	call	0xd50	; 0xd50 <GO_Straight>
    22e6:	27 cf       	rjmp	.-434    	; 0x2136 <main+0x34>

000022e8 <ULT_Int>:
#include "exti_interface.h"

extern u32 local_timval;

void ULT_Int(void)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(UIT_PORT , UIL_TRIGPIN ,DIO_u8OUTPUT);
    22f0:	82 e0       	ldi	r24, 0x02	; 2
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	41 e0       	ldi	r20, 0x01	; 1
    22f6:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(UIT_PORT , UIL_ECHOPIN ,DIO_u8INPUT);
	GLOBEL_INTENABEL();
    22fa:	0e 94 73 10 	call	0x20e6	; 0x20e6 <GLOBEL_INTENABEL>
	TIM0_VoidInt();
    22fe:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <TIM0_VoidInt>
	EXTI0_VoidInti();
    2302:	0e 94 3c 0a 	call	0x1478	; 0x1478 <EXTI0_VoidInti>
	EXTI_VoidSenseLevel(EXT_INT0,EXTI_RISYNG_EDGE);
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <EXTI_VoidSenseLevel>
}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <ULT_Read>:
u16 ULT_Read(void)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	a6 97       	sbiw	r28, 0x26	; 38
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(UIT_PORT , UIL_TRIGPIN ,1);
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	60 e0       	ldi	r22, 0x00	; 0
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	a0 e2       	ldi	r26, 0x20	; 32
    2338:	b1 e4       	ldi	r27, 0x41	; 65
    233a:	8b a3       	std	Y+35, r24	; 0x23
    233c:	9c a3       	std	Y+36, r25	; 0x24
    233e:	ad a3       	std	Y+37, r26	; 0x25
    2340:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2342:	6b a1       	ldd	r22, Y+35	; 0x23
    2344:	7c a1       	ldd	r23, Y+36	; 0x24
    2346:	8d a1       	ldd	r24, Y+37	; 0x25
    2348:	9e a1       	ldd	r25, Y+38	; 0x26
    234a:	2b ea       	ldi	r18, 0xAB	; 171
    234c:	3a ea       	ldi	r19, 0xAA	; 170
    234e:	4a e2       	ldi	r20, 0x2A	; 42
    2350:	50 e4       	ldi	r21, 0x40	; 64
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	8f 8f       	std	Y+31, r24	; 0x1f
    235c:	98 a3       	std	Y+32, r25	; 0x20
    235e:	a9 a3       	std	Y+33, r26	; 0x21
    2360:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2362:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2364:	78 a1       	ldd	r23, Y+32	; 0x20
    2366:	89 a1       	ldd	r24, Y+33	; 0x21
    2368:	9a a1       	ldd	r25, Y+34	; 0x22
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e8       	ldi	r20, 0x80	; 128
    2370:	5f e3       	ldi	r21, 0x3F	; 63
    2372:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2376:	88 23       	and	r24, r24
    2378:	1c f4       	brge	.+6      	; 0x2380 <ULT_Read+0x6c>
		__ticks = 1;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	8e 8f       	std	Y+30, r24	; 0x1e
    237e:	91 c0       	rjmp	.+290    	; 0x24a2 <ULT_Read+0x18e>
	else if (__tmp > 255)
    2380:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2382:	78 a1       	ldd	r23, Y+32	; 0x20
    2384:	89 a1       	ldd	r24, Y+33	; 0x21
    2386:	9a a1       	ldd	r25, Y+34	; 0x22
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	53 e4       	ldi	r21, 0x43	; 67
    2390:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2394:	18 16       	cp	r1, r24
    2396:	0c f0       	brlt	.+2      	; 0x239a <ULT_Read+0x86>
    2398:	7b c0       	rjmp	.+246    	; 0x2490 <ULT_Read+0x17c>
	{
		_delay_ms(__us / 1000.0);
    239a:	6b a1       	ldd	r22, Y+35	; 0x23
    239c:	7c a1       	ldd	r23, Y+36	; 0x24
    239e:	8d a1       	ldd	r24, Y+37	; 0x25
    23a0:	9e a1       	ldd	r25, Y+38	; 0x26
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	4a e7       	ldi	r20, 0x7A	; 122
    23a8:	54 e4       	ldi	r21, 0x44	; 68
    23aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	8a 8f       	std	Y+26, r24	; 0x1a
    23b4:	9b 8f       	std	Y+27, r25	; 0x1b
    23b6:	ac 8f       	std	Y+28, r26	; 0x1c
    23b8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23bc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4a ef       	ldi	r20, 0xFA	; 250
    23c8:	54 e4       	ldi	r21, 0x44	; 68
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8e 8b       	std	Y+22, r24	; 0x16
    23d4:	9f 8b       	std	Y+23, r25	; 0x17
    23d6:	a8 8f       	std	Y+24, r26	; 0x18
    23d8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    23da:	6e 89       	ldd	r22, Y+22	; 0x16
    23dc:	7f 89       	ldd	r23, Y+23	; 0x17
    23de:	88 8d       	ldd	r24, Y+24	; 0x18
    23e0:	99 8d       	ldd	r25, Y+25	; 0x19
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e8       	ldi	r20, 0x80	; 128
    23e8:	5f e3       	ldi	r21, 0x3F	; 63
    23ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ee:	88 23       	and	r24, r24
    23f0:	2c f4       	brge	.+10     	; 0x23fc <ULT_Read+0xe8>
		__ticks = 1;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9d 8b       	std	Y+21, r25	; 0x15
    23f8:	8c 8b       	std	Y+20, r24	; 0x14
    23fa:	3f c0       	rjmp	.+126    	; 0x247a <ULT_Read+0x166>
	else if (__tmp > 65535)
    23fc:	6e 89       	ldd	r22, Y+22	; 0x16
    23fe:	7f 89       	ldd	r23, Y+23	; 0x17
    2400:	88 8d       	ldd	r24, Y+24	; 0x18
    2402:	99 8d       	ldd	r25, Y+25	; 0x19
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	4c f5       	brge	.+82     	; 0x2466 <ULT_Read+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2414:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2416:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2418:	8c 8d       	ldd	r24, Y+28	; 0x1c
    241a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e2       	ldi	r20, 0x20	; 32
    2422:	51 e4       	ldi	r21, 0x41	; 65
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9d 8b       	std	Y+21, r25	; 0x15
    243a:	8c 8b       	std	Y+20, r24	; 0x14
    243c:	0f c0       	rjmp	.+30     	; 0x245c <ULT_Read+0x148>
    243e:	88 ec       	ldi	r24, 0xC8	; 200
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9b 8b       	std	Y+19, r25	; 0x13
    2444:	8a 8b       	std	Y+18, r24	; 0x12
    2446:	8a 89       	ldd	r24, Y+18	; 0x12
    2448:	9b 89       	ldd	r25, Y+19	; 0x13
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <ULT_Read+0x136>
    244e:	9b 8b       	std	Y+19, r25	; 0x13
    2450:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2452:	8c 89       	ldd	r24, Y+20	; 0x14
    2454:	9d 89       	ldd	r25, Y+21	; 0x15
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9d 8b       	std	Y+21, r25	; 0x15
    245a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245c:	8c 89       	ldd	r24, Y+20	; 0x14
    245e:	9d 89       	ldd	r25, Y+21	; 0x15
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	69 f7       	brne	.-38     	; 0x243e <ULT_Read+0x12a>
    2464:	24 c0       	rjmp	.+72     	; 0x24ae <ULT_Read+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	6e 89       	ldd	r22, Y+22	; 0x16
    2468:	7f 89       	ldd	r23, Y+23	; 0x17
    246a:	88 8d       	ldd	r24, Y+24	; 0x18
    246c:	99 8d       	ldd	r25, Y+25	; 0x19
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9d 8b       	std	Y+21, r25	; 0x15
    2478:	8c 8b       	std	Y+20, r24	; 0x14
    247a:	8c 89       	ldd	r24, Y+20	; 0x14
    247c:	9d 89       	ldd	r25, Y+21	; 0x15
    247e:	99 8b       	std	Y+17, r25	; 0x11
    2480:	88 8b       	std	Y+16, r24	; 0x10
    2482:	88 89       	ldd	r24, Y+16	; 0x10
    2484:	99 89       	ldd	r25, Y+17	; 0x11
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <ULT_Read+0x172>
    248a:	99 8b       	std	Y+17, r25	; 0x11
    248c:	88 8b       	std	Y+16, r24	; 0x10
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <ULT_Read+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2490:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2492:	78 a1       	ldd	r23, Y+32	; 0x20
    2494:	89 a1       	ldd	r24, Y+33	; 0x21
    2496:	9a a1       	ldd	r25, Y+34	; 0x22
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8e 8f       	std	Y+30, r24	; 0x1e
    24a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24a4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a8:	8a 95       	dec	r24
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <ULT_Read+0x194>
    24ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(10);
	DIO_voidSetPinValue(UIT_PORT , UIL_TRIGPIN ,0);
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	40 e0       	ldi	r20, 0x00	; 0
    24b4:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_voidSetPinValue>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 e7       	ldi	r26, 0x70	; 112
    24be:	b2 e4       	ldi	r27, 0x42	; 66
    24c0:	8b 87       	std	Y+11, r24	; 0x0b
    24c2:	9c 87       	std	Y+12, r25	; 0x0c
    24c4:	ad 87       	std	Y+13, r26	; 0x0d
    24c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    24cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	4a ef       	ldi	r20, 0xFA	; 250
    24d6:	54 e4       	ldi	r21, 0x44	; 68
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	8f 83       	std	Y+7, r24	; 0x07
    24e2:	98 87       	std	Y+8, r25	; 0x08
    24e4:	a9 87       	std	Y+9, r26	; 0x09
    24e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ea:	78 85       	ldd	r23, Y+8	; 0x08
    24ec:	89 85       	ldd	r24, Y+9	; 0x09
    24ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e8       	ldi	r20, 0x80	; 128
    24f6:	5f e3       	ldi	r21, 0x3F	; 63
    24f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24fc:	88 23       	and	r24, r24
    24fe:	2c f4       	brge	.+10     	; 0x250a <ULT_Read+0x1f6>
		__ticks = 1;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	3f c0       	rjmp	.+126    	; 0x2588 <ULT_Read+0x274>
	else if (__tmp > 65535)
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	3f ef       	ldi	r19, 0xFF	; 255
    2516:	4f e7       	ldi	r20, 0x7F	; 127
    2518:	57 e4       	ldi	r21, 0x47	; 71
    251a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    251e:	18 16       	cp	r1, r24
    2520:	4c f5       	brge	.+82     	; 0x2574 <ULT_Read+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2522:	6b 85       	ldd	r22, Y+11	; 0x0b
    2524:	7c 85       	ldd	r23, Y+12	; 0x0c
    2526:	8d 85       	ldd	r24, Y+13	; 0x0d
    2528:	9e 85       	ldd	r25, Y+14	; 0x0e
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e2       	ldi	r20, 0x20	; 32
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
    254a:	0f c0       	rjmp	.+30     	; 0x256a <ULT_Read+0x256>
    254c:	88 ec       	ldi	r24, 0xC8	; 200
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	9c 83       	std	Y+4, r25	; 0x04
    2552:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <ULT_Read+0x244>
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	69 f7       	brne	.-38     	; 0x254c <ULT_Read+0x238>
    2572:	14 c0       	rjmp	.+40     	; 0x259c <ULT_Read+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2574:	6f 81       	ldd	r22, Y+7	; 0x07
    2576:	78 85       	ldd	r23, Y+8	; 0x08
    2578:	89 85       	ldd	r24, Y+9	; 0x09
    257a:	9a 85       	ldd	r25, Y+10	; 0x0a
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	9e 81       	ldd	r25, Y+6	; 0x06
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	9a 81       	ldd	r25, Y+2	; 0x02
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <ULT_Read+0x280>
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(60);

   return local_timval;
    259c:	80 91 76 00 	lds	r24, 0x0076
    25a0:	90 91 77 00 	lds	r25, 0x0077
}
    25a4:	a6 96       	adiw	r28, 0x26	; 38
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <__udivmodhi4>:
    25b6:	aa 1b       	sub	r26, r26
    25b8:	bb 1b       	sub	r27, r27
    25ba:	51 e1       	ldi	r21, 0x11	; 17
    25bc:	07 c0       	rjmp	.+14     	; 0x25cc <__udivmodhi4_ep>

000025be <__udivmodhi4_loop>:
    25be:	aa 1f       	adc	r26, r26
    25c0:	bb 1f       	adc	r27, r27
    25c2:	a6 17       	cp	r26, r22
    25c4:	b7 07       	cpc	r27, r23
    25c6:	10 f0       	brcs	.+4      	; 0x25cc <__udivmodhi4_ep>
    25c8:	a6 1b       	sub	r26, r22
    25ca:	b7 0b       	sbc	r27, r23

000025cc <__udivmodhi4_ep>:
    25cc:	88 1f       	adc	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	5a 95       	dec	r21
    25d2:	a9 f7       	brne	.-22     	; 0x25be <__udivmodhi4_loop>
    25d4:	80 95       	com	r24
    25d6:	90 95       	com	r25
    25d8:	bc 01       	movw	r22, r24
    25da:	cd 01       	movw	r24, r26
    25dc:	08 95       	ret

000025de <__prologue_saves__>:
    25de:	2f 92       	push	r2
    25e0:	3f 92       	push	r3
    25e2:	4f 92       	push	r4
    25e4:	5f 92       	push	r5
    25e6:	6f 92       	push	r6
    25e8:	7f 92       	push	r7
    25ea:	8f 92       	push	r8
    25ec:	9f 92       	push	r9
    25ee:	af 92       	push	r10
    25f0:	bf 92       	push	r11
    25f2:	cf 92       	push	r12
    25f4:	df 92       	push	r13
    25f6:	ef 92       	push	r14
    25f8:	ff 92       	push	r15
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	ca 1b       	sub	r28, r26
    2608:	db 0b       	sbc	r29, r27
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	09 94       	ijmp

00002616 <__epilogue_restores__>:
    2616:	2a 88       	ldd	r2, Y+18	; 0x12
    2618:	39 88       	ldd	r3, Y+17	; 0x11
    261a:	48 88       	ldd	r4, Y+16	; 0x10
    261c:	5f 84       	ldd	r5, Y+15	; 0x0f
    261e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2620:	7d 84       	ldd	r7, Y+13	; 0x0d
    2622:	8c 84       	ldd	r8, Y+12	; 0x0c
    2624:	9b 84       	ldd	r9, Y+11	; 0x0b
    2626:	aa 84       	ldd	r10, Y+10	; 0x0a
    2628:	b9 84       	ldd	r11, Y+9	; 0x09
    262a:	c8 84       	ldd	r12, Y+8	; 0x08
    262c:	df 80       	ldd	r13, Y+7	; 0x07
    262e:	ee 80       	ldd	r14, Y+6	; 0x06
    2630:	fd 80       	ldd	r15, Y+5	; 0x05
    2632:	0c 81       	ldd	r16, Y+4	; 0x04
    2634:	1b 81       	ldd	r17, Y+3	; 0x03
    2636:	aa 81       	ldd	r26, Y+2	; 0x02
    2638:	b9 81       	ldd	r27, Y+1	; 0x01
    263a:	ce 0f       	add	r28, r30
    263c:	d1 1d       	adc	r29, r1
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	ed 01       	movw	r28, r26
    264a:	08 95       	ret

0000264c <_exit>:
    264c:	f8 94       	cli

0000264e <__stop_program>:
    264e:	ff cf       	rjmp	.-2      	; 0x264e <__stop_program>
